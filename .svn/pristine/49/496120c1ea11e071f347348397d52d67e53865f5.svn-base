<?php

require_once APPLICATION_PATH.'/models/servicemodel/We_Base_ServiceModel.php';
require_once APPLICATION_PATH.'/models/servicemodel/Attachments.php';
require_once APPLICATION_PATH.'/models/tablemodel/User.php';
require_once APPLICATION_PATH.'/helpers/Verification.php';
require_once APPLICATION_PATH.'/helpers/CommonHelper.php';
require_once APPLICATION_PATH.'/helpers/AuthenticationMgr.php';
require_once APPLICATION_PATH.'/helpers/Social/WeiboHelper.php';
require_once APPLICATION_PATH.'/helpers/CommonHelper.php';


class Users extends We_Base_ServiceModel{

    //column
    public $id;
    public $userName;
    public $latitude;
    public $longitude;
    public $locationTime;
    public $city;
    public $birthday;
    public $avatar_id;
    public $weiboUid;
    public $signature;
    public $word;
    public $upconstellation;
    public $downconstellation;
    public $prefChatToConstellation;
    public $prefChatGender;
    
    

    
    //table
    public $password;
    public $token;
    public $deviceToken;
    public $device;   //Iphone或Android
    public $telPhone;
    public $loginMode;
    public $forgetpasswdIdentifier;
    public $resetPasswdInvalidTime;
    public $weiboAccessToken;
    public $constellation;
    public $isPushMsgOn;
    
    //aggregation
    public $distance;   //距离，需要上层api传入cmpLatitude和cmpLongitude的transient字段
    public $avatarOriginUrl;
    public $avatarMediumUrl;
    public $avatarThumbUrl;
    
    public $isYourFollow;  //是否是你的关注

    //readonly
    public $registerFrom;
    public $gender;
    
    
    //subNode
    public $prefConstellations;
    
    //transient
    public $cmpLatitude;
    public $cmpLongitude;
    

	public function __construct()
	{
	    parent::__construct();
	        
		$this->propertyTypes["id"] = $this->columnProperty;
		$this->propertyTypes["userName"] = $this->columnProperty;
		$this->propertyTypes["latitude"] = $this->columnProperty;
		$this->propertyTypes["longitude"] = $this->columnProperty;
        $this->propertyTypes["locationTime"] = $this->columnProperty;
        $this->propertyTypes["avatar_id"] = $this->columnProperty;
        $this->propertyTypes["weiboUid"] = $this->columnProperty;
        $this->propertyTypes["signature"] = $this->columnProperty;
        $this->propertyTypes["word"] = $this->columnProperty;
        $this->propertyTypes["upconstellation"] = $this->columnProperty;
        $this->propertyTypes["downconstellation"] = $this->columnProperty;
        $this->propertyTypes["prefChatToConstellation"] = $this->columnProperty;
        $this->propertyTypes["prefChatGender"] = $this->columnProperty;
        $this->propertyTypes["isPushMsgOn"] = $this->columnProperty;
        
        $this->propertyTypes["prefConstellations"] = $this->subNodeProperty;
        $this->subNodePropertyTypes["prefConstellations"] = "Constellations";
        
        $this->propertyTypes["birthday"] = $this->columnProperty;
        $this->propertyTypes["city"] = $this->columnProperty;
		
		$this->propertyTypes["password"] = $this->tableProperty;
		$this->propertyTypes["token"] = $this->tableProperty;
		$this->propertyTypes["deviceToken"] = $this->tableProperty;
		$this->propertyTypes["device"] = $this->tableProperty;
		$this->propertyTypes["telPhone"] = $this->tableProperty;
		$this->propertyTypes["loginMode"] = $this->tableProperty;
		$this->propertyTypes["forgetpasswdIdentifier"] = $this->tableProperty;
		$this->propertyTypes["resetPasswdInvalidTime"] = $this->tableProperty;
		$this->propertyTypes["weiboAccessToken"] = $this->tableProperty;
		$this->propertyTypes["constellation"] = $this->tableProperty;
		
		
		
		$this->propertyTypes["isYourFollow"] = $this->aggregationProperty;
		$this->propertyTypes["avatarOriginUrl"] = $this->aggregationProperty;
		$this->propertyTypes["avatarMediumUrl"] = $this->aggregationProperty;
		$this->propertyTypes["avatarThumbUrl"] = $this->aggregationProperty;
        $this->propertyTypes["distance"] = $this->aggregationProperty;


        
        $this->propertyTypes["registerFrom"] = $this->readOnlyProperty;
        $this->propertyTypes["gender"] = $this->readOnlyProperty;
        
        $this->propertyTypes["cmpLatitude"] = $this->transientProperty;
        $this->propertyTypes["cmpLongitude"] = $this->transientProperty;
	}
	
	public function setOtherPropertyForResponse($operation){
	    parent::setOtherPropertyForResponse($operation);
		if($operation != 'delete'){
		    if($this->cmpLatitude != null && $this->cmpLongitude != null){
		        if($this->longitude == null){
		            $this->longitude = 0.0;
		        }
		        if($this->latitude == null){
		        	$this->latitude = 0.0;
		        }
		        $this->distance = CommonHelper::calcDistance($this->latitude, $this->cmpLatitude, $this->longitude, $this->cmpLongitude);
		    }
		    
		    if($this->avatar_id != null){
		        $this->avatarOriginUrl = Attachments::getAttachmentUrl($this->avatar_id, 1);
		        $this->avatarMediumUrl = Attachments::getAttachmentUrl($this->avatar_id, 2);
		        $this->avatarThumbUrl = Attachments::getAttachmentUrl($this->avatar_id, 3);
		    }

		    $constellations = new Constellations();
		    $selectArr = $constellations->getSelectedArrayByAlias("c");
		    
		    $rows = $constellations->tableModel->fetchList($selectArr,"c","inner join pref_constellation p on p.constellation_id = c.id ","p.user_id = ?",array($this->id), "p.id ASC", null, null);
		    $returnResultSet = array();
		    $i = 0;
		    foreach($rows as $key=>$value)
		    {
		    	$returnServiceModel = new Constellations();
		    	$returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
		    	$returnServiceModel->setOtherPropertyForResponse('list');
		    	$returnServiceModel->unsetNotExposeProperty();
		    	$returnResultSet[$i] = $returnServiceModel;
		    	$i++;
		    }
		    $this->prefConstellations = $returnResultSet;
		    
		    $usefriend = new Userfriend();
		    
		    $authToken = AuthenticationMgr::getAuthInfo();
		    if($authToken == null){
		        $this->isYourFollow = 0;
		    }else{
		        $currentUserId = Users::getUserIdByToken($authToken);
		        $count = $usefriend->count(null, null, "user_id = ? and refUser_id=?", array($currentUserId,$this->id ));
		        if($count > 0){
		            $this->isYourFollow = 1;
		        }else{
		            $this->isYourFollow = 0;
		        }
		    }
		    
	
		    
		    
		}
		return $this;
	}
	
	
	public function onGet()
	{
		parent::onGet();
	}


	
	
	public function onCreate()
	{
		parent::onCreate();

		if($this->registerFrom != 'byPhone' && $this->registerFrom != 'byWeibo'){
		    $this->logger->log('register from is invalid = '.$this->registerFrom,Zend_Log::ERR);
		    throw new WeException(20206);
		}
		if($this->registerFrom == 'byPhone')
		{
		    if($this->telPhone == null || (!Verification::varifyTelPhone($this->telPhone))){
		    	$this->logger->log('telPhone is invalid = '.$this->telPhone,Zend_Log::ERR);
		    	throw new WeException(20207);
		    }
		    if($this->password == null){
		    	$this->logger->log('password is invalid = '.$this->password,Zend_Log::ERR);
		    	throw new WeException(20208);
		    }
		    
		    //手机号唯一
		    $rows = $this->tableModel->fetchList(null,null,null,'telPhone=? and telPhone != ?',array($this->telPhone,''), null, null, null,true);
		    if(count($rows) > 0){
		    	$this->logger->log('telPhone is repeated = '.$this->telPhone,Zend_Log::ERR);
		    	throw new WeException(20210);
		    }
		    
		    
		}
        else if($this->registerFrom == 'byWeibo')
        {
            if($this->weiboUid == null || $this->weiboAccessToken == null)
            {
                $this->logger->log('weiboUid or weiboAccessToken is invalid = '.$this->weiboUid,Zend_Log::ERR);
                throw new WeException(20229);
            }
            //weiboId唯一
            $rows = $this->tableModel->fetchList(null,null,null,'weiboUid=? and weiboUid != ?',array($this->weiboUid,''), null, null, null,true);
            if(count($rows) > 0){
            	$this->logger->log('weiboUid is repeated = '.$this->weiboUid,Zend_Log::ERR);
            	throw new WeException(20230);
            }
            
        }
        
        
        
		
		//昵称唯不能为空
		if($this->userName == null){
		    $this->logger->log('userName is null',Zend_Log::ERR);
		    throw new WeException(20209);
		}
		

		
		if($this->device != null && $this->device != 'Iphone' && $this->device != 'Android'){
		    $this->logger->log('device is invalid  = '.$this->device,Zend_Log::ERR);
		    throw new WeException(20221);
		}
		
		//密码外部加密好

		
		
		if($this->gender == null){
		    $this->logger->log('gender should not be empty',Zend_Log::ERR);
		    throw new WeException(20217);
		}


		$token = CommonHelper::create_uuid();
		$this->token = $token;
		
		$rows = $this->tableModel->fetchList(null,null,null,'token=? ',array($this->token), null, null, null,true);
		if(count($rows) > 0){
			$this->logger->log('token is repeated unexpectedly',Zend_Log::ERR);
			throw new WeException(20202);
		}
		

		$this->constellation = Users::getConstellationByBirday($this->birthday);
		
        $this->isPushMsgOn = 1;
	}
	
	public static function getConstellationByBirday($birthday){

	    $strTime = date('m-d',$birthday);
	    $strArr = explode("-", $strTime);
	    $month = intval($strArr[0]);
	    $i_day = intval($strArr[1]);
	    
	    if($month == 1){
	        if ($i_day >= 21 && $i_day <= 31) {
	        	//returnString = @"水瓶座";
	        	return 2;
	        }
	        if ($i_day >= 1 && $i_day <= 20) {
	        	//returnString = @"摩羯座";
	        	return 1;
	        }
	    }else if($month == 2){
	        if ($i_day >= 1 && $i_day <= 19) {
	        	//returnString = @"水瓶座";
	        	return 2;
	        }
	        if ($i_day >= 20 && $i_day <=31) {
	        	//returnString = @"双鱼座";
	        	return 3;
	        }
	    }else if($month == 3){
	        if ($i_day >= 1 && $i_day <= 20) {
	        	//returnString = @"双鱼座";
	        	return 3;
	        }
	        if ($i_day >= 21 && $i_day <=31) {
	        	//returnString = @"白羊座";
	        	return 4;
	        }
	    }else if($month == 4){
	        if ($i_day >= 1 && $i_day <= 20) {
	        	//returnString = @"白羊座";
	        	return 4;
	        }
	        if ($i_day >= 21 && $i_day <=31) {
	        	//returnString = @"金牛座";
	        	return 5;
	        }
	    }else if($month == 5){
	    	if ($i_day >= 1 && $i_day <= 21) {
	    			//returnString = @"金牛座";
	    		return 5;
	    	}
	    	if ($i_day >= 22 && $i_day <=31) {
	    			//returnString = @"双子座";
	    		return 6;
	    	}
	    }else if($month == 6){
	        if ($i_day >= 1 && $i_day <= 21) {
	        	//returnString = @"双子座";
	        	return 6;
	        }
	        if ($i_day >= 22 && $i_day <=30) {
	        	//returnString = @"巨蟹座";
	        	return 7;
	        }
	    }else if($month == 7){
	        if ($i_day >= 1 && $i_day <= 22) {
	        	//returnString = @"巨蟹座";
	        	return 7;
	        }
	        if ($i_day >= 23 && $i_day <=31) {
	        	//returnString = @"狮子座";
	        	return 8;
	        }
	    }else if($month == 8){
	        if ($i_day >= 1 && $i_day <= 22) {
	        	//returnString = @"狮子座";
	        	return 8;
	        }
	        if ($i_day >= 23 && $i_day <=31) {
	        	//returnString = @"处女座";
	        	return 9;
	        }
	    }else if($month == 9){
	    	if ($i_day >= 1 && $i_day <= 22) {
	    			//returnString = @"处女座";
	    		return 9;
	    	}
	       if ($i_day >= 23 && $i_day <=30) {
	    			//returnString = @"天秤座";
	    		return 10;
	    	}
	    }else if($month == 10){
	    	if ($i_day >= 1 && $i_day <= 23) {
	    		//returnString = @"天秤座";
	    		return 10;
	    	}
	    	if ($i_day >= 24 && $i_day <=31) {
	    		//returnString = @"天蝎座";
	    		return 11;
	    	}
	    }else if($month == 11){
	        if ($i_day >= 1 && $i_day <= 22) {
	        	//returnString = @"天蝎座";
	        	return 11;
	        }
	        if ($i_day >= 23 && $i_day <=30) {
	        	//returnString = @"射手座";
	        	return 12;
	        }
	    }else{
	        if ($i_day >= 1 && $i_day <= 21) {
	        	//returnString = @"射手座";
	        	return 12;
	        }
	        if ($i_day >= 22 && $i_day <=31) {
	        	//returnString = @"摩羯座";
	        	return 1;
	        }	        
	    }
	     
	}
	
	public function operationOfOtherProperty($operation)
	{
	   parent::operationOfOtherProperty($operation);
	   if($operation == 'create'){
	       if($this->prefConstellations == null || count($this->prefConstellations) == 0){
	           //报错
	           $this->logger->log("pref constellation is empty",Zend_Log::ERR);
	           throw new WeException(20228);
	       }
	       //创建
	       foreach ($this->prefConstellations as $key=>$value){
	           $prefConstellation = new Prefconstellations();
	           $prefConstellation->user_id = $this->id;
	           $prefConstellation->constellation_id = $value->id;
	           $consts = new Constellations();
	           $consts->id = $value->id;
	           $consts = $consts->get();
	           if($consts == null){
	               $this->logger->log('constellation is not exist when id = '.$value->id,Zend_Log::ERR);
	               throw new WeException(20103);
	           }
	           $prefConstellation->create();
	       }
	       
	   }
	   if($operation == 'update'){
	       if($this->fromType == 'setcurrentuserinfo'){
	           //更新
	           $this->tableModel->executeUpdate("delete from pref_constellation where user_id = ?",array($this->id));
	           if($this->prefConstellations == null || count($this->prefConstellations) == 0){
	           	//报错
	           	$this->logger->log("pref constellation is empty",Zend_Log::ERR);
	           	throw new WeException(20228);
	           }
	           //创建
	           foreach ($this->prefConstellations as $key=>$value){
	           	$prefConstellation = new Prefconstellations();
	           	$prefConstellation->user_id = $this->id;
	           	$prefConstellation->constellation_id = $value->id;
	           	$consts = new Constellations();
	           	$consts->id = $value->id;
	           	$consts = $consts->get();
	           	if($consts == null){
	           		$this->logger->log('constellation is not exist when id = '.$value->id,Zend_Log::ERR);
	           		throw new WeException(20103);
	           	}
	           	$prefConstellation->create();
	           }
	       }
	   }
	  
	}
	
	
	
	public function onUpdate()
	{
		parent::onUpdate();
		
		//昵称唯不能为空
		if($this->userName == null){
		    $this->logger->log('userName is null',Zend_Log::ERR);
		    throw new WeException(20209);
		}
		
		//手机号不能修改
		if($this->registerFrom == 'byPhone'){
		    $oldTelPhone = $this->snapshotColumnPropertyValues['telPhone'];
		    if($oldTelPhone != $this->telPhone){
		        $this->logger->log("telPhone should not be changed to ".$this->telPhone.' when update',Zend_Log::ERR);
		        throw new WeException(20211);
		    }
		}

		
		
		if($this->gender == null){
			$this->logger->log('gender should not be empty',Zend_Log::ERR);
			throw new WeException(20217);
		}
		
		
		if($this->device != null && $this->device != 'Iphone' && $this->device != 'Android'){
			$this->logger->log('device is invalid  = '.$this->device,Zend_Log::ERR);
			throw new WeException(20221);
		}
		
		
		
		
		
		
	}
	
	public function onDelete()
	{
		parent::onDelete();
	}
	
	

	public static function generateDistanceFilterQuery($scopeDistance,$latitude,$longitude,$excludeUserId,$filterGender,$filterConstellation,$top,$skip){
	    //query内部distance必须大于1，因为0表示未定义
	    $now = time();
	    $filterGenderQuery = '';
	    if($filterGender == null){
	        $filterGenderQuery = "";
	    }else if($filterGender == '男'){
	        $filterGenderQuery = " and gender = '男'";
	    }else if($filterGender == '女'){
	        $filterGenderQuery = " and gender = '女'";
	    }
	    $filterConstellationQuery = '';
	    if($filterConstellation == 0){
	        //$logger = Zend_Registry::get('log');
	        //$logger->log("为空",Zend_Log::DEBUG);
	        //没有特定筛选的星座时，则取对方的筛选星座是当前用户的偏好星座或对方的筛选星座是全部
	        
	        $str = 'select *, ceil(1 + 1000*(2 * 6378.137* ASIN(SQRT(POW(SIN(PI() * ('.$latitude.' - latitude) / 360), 2) + COS(PI() * '.$latitude.' / 180)
	        		* COS(latitude* PI() / 180) * POW(SIN(PI() * ('.$longitude.' - longitude) / 360), 2))))) AS distance ,('.$now.'-locationTime ) AS timeDistance from user u HAVING distance <= '
	        	        				.$scopeDistance.' and id != '.$excludeUserId.' '.$filterGenderQuery.
	        	        				' and (
	       	        				        id in(select uu.id from user uu where uu.prefChatToConstellation != 0 and uu.prefChatToConstellation in (select ppp.constellation_id from pref_constellation ppp where ppp.user_id = '.$excludeUserId.'))
	       	        				        or (id in ( select uuu.id from user uuu where uuu.prefChatToConstellation = 0 ))
	                                       )'.
	        	                                       ' order by distance limit '.$skip.','.$top;
	        
	    }else{
	        //$logger = Zend_Registry::get('log');
	        //$logger->log("不为空=".$filterConstellation,Zend_Log::DEBUG);
	        //有特定筛选星座时，则取对方的筛选星座是前用户的偏好星座并且自己的筛选星座是对方的偏好星座或对方的筛选星座为不限并且自己的筛选星座是对方的偏好星座
	        //$filterConstellationQuery = ' and id in(select id from user where )';
	        
	        $str = 'select *, ceil(1 + 1000*(2 * 6378.137* ASIN(SQRT(POW(SIN(PI() * ('.$latitude.' - latitude) / 360), 2) + COS(PI() * '.$latitude.' / 180)
	        		* COS(latitude* PI() / 180) * POW(SIN(PI() * ('.$longitude.' - longitude) / 360), 2))))) AS distance ,('.$now.'-locationTime ) AS timeDistance from user u HAVING distance <= '
	    	        				.$scopeDistance.' and id != '.$excludeUserId.' '.$filterGenderQuery.
	    	        				' and (
	    	        				         ((
	    	        				            id in(select uu.id from user uu where uu.prefChatToConstellation != 0 and uu.prefChatToConstellation in (select ppp.constellation_id from pref_constellation ppp where ppp.user_id = '.$excludeUserId.'))
	    	        				         )
	    	        				         and 
	    	        				         (
	    	        				            id in(select uu2.id from user uu2 inner join pref_constellation pp2 on uu2.id = pp2.user_id where pp2.constellation_id = '.$filterConstellation.')
	                                         ))
	    	        				         or 
	    	        				         ((
	    	        				            id in ( select uuu.id from user uuu where uuu.prefChatToConstellation = 0 )
	                                         )
	                                         and 
	    	        				         ( 
	    	        				            id in (select uuu2.id from user uuu2 inner join pref_constellation ppp2 on uuu2.id = ppp2.user_id where ppp2.constellation_id = '.$filterConstellation.') 
	                                         ))
	    	        				       )'.
	        	                      ' order by distance limit '.$skip.','.$top; 
	    }

	    
	    return $str;
	}
	
	public function beforeSetOtherOperationForResponse($oldObject){
	    $this->cmpLatitude = $oldObject->cmpLatitude;
	    $this->cmpLongitude = $oldObject->cmpLongitude;
	}
	
	
	public static function getUserIdByToken($token){
	    if($token == null){
	        return 0;
	    }
	    $user = new User();
	    $rows = $user->fetchList(array('id','token'), null, null, "token = ? and token != ?", array($token,''), null, null, null);
	    if(count($rows)<=0){
	        return 0;
	    }else{
	        $id = $rows[0]["id"];
	        return $id;
	    }
	}
	

	
	public static function encryptPassword($str){
		$entryPasswd = password_hash($str, PASSWORD_DEFAULT);
		return $entryPasswd;
	}
	
	public static function verifyPassword($str,$encrptPassword){
		if(password_verify($str,$encrptPassword)){
			return true;
		}else{
			return false;
		}
	}
	
	
	
	

	
	
}


?>
