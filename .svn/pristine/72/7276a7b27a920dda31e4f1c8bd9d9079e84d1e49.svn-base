<?php
class CommonHelper
{

	//Object 转array
    	static public function objectToArray($object)
    	{
    		$result = array();
    		$object = is_object($object) ? get_object_vars($object) : $object;
    		foreach ($object as $key => $val) {
    			$val = (is_object($val) || is_array($val)) ? self::objectToArray($val) : $val;
    			$result[$key] = $val;
    		}
    		return $result;
    
    	}
    	static public function filterArrayNull($var)
    	{
    		if(is_null($var))
    		{
    			return false;
    		}
    
    		return true;
    	}

    
    	static public function getConstellation($month,$day){
    		switch($month){
    			case "01":
    				if($day<20){$res=12;}else{$res=1;} break;
    			case "02":
    				if($day<19){$res=1;}else{$res=2;} break;
    			case "03":
    				if($day<21){$res=2;}else{$res=3;} break;
    			case "04":
    				if($day<21){$res=3;}else{$res=4;} break;
    			case "05":
    				if($day<21){$res=4;}else{$res=5;} break;
    			case "06":
    				if($day<22){$res=5;}else{$res=6;} break;
    			case "07":
    				if($day<23){$res=6;}else{$res=7;} break;
    			case "08":
    				if($day<23){$res=7;}else{$res=8;} break;
    			case "09":
    				if($day<23){$res=8;}else{$res=9;} break;
    			case "10":
    				if($day<23){$res=9;}else{$res=10;} break;
    			case "11":
    				if($day<23){$res=10;}else{$res=11;} break;
    			case "12":
    				if($day<22){$res=11;}else{$res=12;} break;
    		}
    		return $res;
    	}
    
    	static function compresImage($img_name,$newname, $type, $modwidth, $modheight) {
    		list ( $width, $height ) = getimagesize ( $img_name );
    
    		$tn = imagecreatetruecolor ( $modwidth, $modheight );
    		if (strcmp ( "image/png", $type ) == 0) {
    			imagealphablending ( $tn, false ); // For transparent BackGround
    			imagesavealpha ( $tn, true );
    		}
    
    		if ( strcmp ( "image/jpg", $type ) == 0 ||  strcmp ( "image/jpeg", $type ) == 0 ||  strcmp ( "image/pjpeg", $type ) == 0){
    		    $src_img = imagecreatefromjpeg ( $img_name );
    		}
    

    		if ( strcmp ( "image/png", $type ) == 0 ){
    		    $src_img = imagecreatefrompng ( $img_name );
    		}

    
    		if ( strcmp ( "image/gif", $type ) == 0){
    		    $src_img = imagecreatefromgif ( $img_name );
    		}

    
    		imagecopyresampled ( $tn, $src_img, 0, 0, 0, 0, $modwidth, $modheight, $width, $height );
    
    		if ( strcmp ( "image/png", $type ) == 0) {
    			imagesavealpha ( $src_img, true );
    			$ok = imagepng ( $tn, $newname );
    		} else if ( strcmp ( "image/gif", $type ) == 0) {
    			$ok = imagegif ( $tn, $newname );
    		} else {
    			$ok = imagejpeg ( $tn, $newname,95 );
    		}
    
    		if ($ok == 1) {
    			//return "<img src=" . $_FILES ['image'] ['name'] . " border='0'>";
    			return $newname;
    		}
    	}
    
    	static function curl_post_async($url, $json)
    	{
    		//     	foreach ($params as $key => &$val) {
    		//     		if (is_array($val)) $val = implode(',', $val);
    		//     		$post_params[] = $key.'='.urlencode($val);
    		//     	}
    		//     	$post_string = implode('&', $post_params);
    
    		$parts=parse_url($url);
    
    		$fp = fsockopen($parts['host'],
    				isset($parts['port'])?$parts['port']:80,
    				$errno, $errstr, 30);
    
    		$out = "POST ".$parts['path']." HTTP/1.1\r\n";
    		$out.= "Host: ".$parts['host']."\r\n";
    		$out.= "Content-Type: application/json\r\n";
    		$out.= "Content-Length: ".strlen($json)."\r\n";
    		$out.= "Connection: Close\r\n\r\n";
    		if (isset($json)) $out.= $json;
    
    		fwrite($fp, $out);
    		fclose($fp);
    }
    
    /**
     * @param string $uid ��ㄦ��uid
     * @param int $flag 1琛ㄧず��ㄦ�ｅ��锛�0琛ㄧず��ㄥ�����
     * @param string $message ��ㄩ�����瀹�
     */
//     static public function pushMsg($uid , $flag , $message) {
//     	//$this->logger->log("TestpushController::indexAction", Zend_Log::DEBUG);
//     	//$json = HttpHelper::getRequestPayload();
//     	//$json = json_decode($json);
//     	//     	$uid = $json->uid;
//     	//     	$flag = $json->flag;
//     	if ($flag == 1) {
//     		$flag = false;
//     	}else{
//     		$flag = true;
//     	}
    
//     	$user = new User();
//     	$row = $user->fetchList('uid = ?', null, null, null, array($uid), array('deviceToken'));
//     	if ($row[0]['deviceToken'] == '') {
//     		return;
//     	}
//     	$deviceToken = $row[0]['deviceToken'];
//     	self::send($message, $deviceToken, 1, $flag);
//     	//exit;
//     }
    
    static public function send($message, $deviceToken, $badge,$isTest){
    	if($isTest){
    		$serverUrl   = 'ssl://gateway.sandbox.push.apple.com:2195';
    		$apnsCert = APPLICATION_PATH.DIRECTORY_SEPARATOR.'configs'.DIRECTORY_SEPARATOR.'ckdev.pem';
    	}
    	else{
    		$serverUrl = 'ssl://gateway.push.apple.com:2195';
    		$apnsCert = APPLICATION_PATH.DIRECTORY_SEPARATOR.'configs'.DIRECTORY_SEPARATOR.'ck.pem';
    	}
    	$pass        = 'hzlcmy862';//璇�涔���ｄ护
    	$deviceToken = str_replace('>', '', $deviceToken);
    	$deviceToken = str_replace('<', '', $deviceToken);
    	$sound   = 'default';
    	$body    = array('aps' => array('alert' => $message , 'badge' => $badge , 'sound' => $sound));
    	$streamContext = stream_context_create();
    	stream_context_set_option ( $streamContext, 'ssl', 'local_cert', $apnsCert );
    	stream_context_set_option ( $streamContext, 'ssl', 'passphrase', $pass );
    	$apns = stream_socket_client ( $serverUrl, $error, $errorString, 60, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $streamContext);//杩���ユ����″��
    
    	//$this->logger->log('apns', Zend_Log::DEBUG);
    	if ($apns) {
    		//echo 'Connection OK <br/>';
    	} else {
    		//     		echo 'Failed to connect '.$errorString;
    		//     		var_dump($error);
    		return;
    	}
    	$payload = json_encode ( $body );
    	$msg = chr(0).pack('n',32).pack('H*', str_replace(' ','',$deviceToken)).pack('n',strlen($payload)).$payload;
    
    	$result  = fwrite ( $apns, $msg);
    	//$this->logger->log($msg, Zend_Log::DEBUG);
    	fclose ( $apns );
    	//     	echo $msg;
    	//     	echo $deviceToken;
    	//     	exit;
    	if ($result){
    		//echo 'Sending message successfully: ' . $payload;
    	}else{
    		//echo 'Message not delivered';
    	}
    }
    
    //获取对段ip
    static public function getip() {
    	$unknown = 'unknown';
    	if (isset ( $_SERVER ['HTTP_X_FORWARDED_FOR'] ) && $_SERVER ['HTTP_X_FORWARDED_FOR'] && strcasecmp ( $_SERVER ['HTTP_X_FORWARDED_FOR'], $unknown )) {
    		$ip = $_SERVER ['HTTP_X_FORWARDED_FOR'];
    	} elseif (isset ( $_SERVER ['REMOTE_ADDR'] ) && $_SERVER ['REMOTE_ADDR'] && strcasecmp ( $_SERVER ['REMOTE_ADDR'], $unknown )) {
    		$ip = $_SERVER ['REMOTE_ADDR'];
    	}
    	/*
    	 * 澶����澶�灞�浠ｇ����������� ������浣跨�ㄦ�ｅ����瑰��锛�$ip = preg_match("/[\d\.] {7,15}/", $ip, $matches) ?
    	* $matches[0] : $unknown;
    	*/
    	if (false !== strpos ( $ip, ',' ))
    		$ip = reset ( explode ( ',', $ip ) );
    	return $ip;
    }
    
    static function create_uuid($prefix = ""){
    	$str = md5(uniqid(mt_rand(), true));
    	$uuid  = substr($str,0,8) . '';
    	$uuid .= substr($str,8,4) . '';
    	$uuid .= substr($str,12,4) . '';
    	$uuid .= substr($str,16,4) . '';
    	$uuid .= substr($str,20,12);
    	return $prefix . $uuid;
    }

    
    static public function calcDistance($latitude1, $latitude2,$longitude1,$longitude2){
        $theta = $longitude1 - $longitude2;
        $miles = (sin(deg2rad($latitude1)) * sin(deg2rad($latitude2))) + (cos(deg2rad($latitude1)) * cos(deg2rad($latitude2)) * cos(deg2rad($theta)));
        $miles = acos($miles);
        $miles = rad2deg($miles);
        $miles = $miles * 60 * 1.1515;
        $feet = $miles * 5280;
        $yards = $feet / 3;
        $kilometers = $miles * 1.609344;
        $meters = $kilometers * 1000;
        $meters = ceil($meters);
        if($meters <= 0){
            //0表示未定义，所以用1表示最小距离
            $meters = 1;
        }
        return $meters;
        
//         $EARTH_RADIUS = 6378.137;   //公里
//         $radLat1 = deg2rad($latitude1);
//         $radLat2 = deg2rad($latitude2);
        
//         $a = $radLat1-$radLat2;
//         //$b = deg2rad($longitude1) – deg2rad($longitude2);
//         $b = deg2rad($longitude1) - deg2rad($longitude2);
//         $s = 2 * asin(sqrt(pow(sin($a/2),2) +
//         		cos($radLat1)*cos($radLat2)*pow(sin($b/2),2)));
//         $s = $s *$EARTH_RADIUS;
//         $s = round($s * 10000) / 10000;
//         return $s;
        //return compact('miles','feet','yards','kilometers','meters'); 
    }
    
    
    public  static function getCityArray(){
        return array("北京"=>array("北京"),
                     "上海"=>array("上海"),
                     "天津"=>array("天津"),
                     "重庆"=>array("重庆"),
                     "香港"=>array("香港"),
                     "澳门"=>array("澳门"),
                     "台湾"=>array("台北","高雄","基隆","台中","台南","新竹","嘉义"),
                     "河北"=>array("石家庄","唐山","秦皇岛","邯郸","邢台","保定","张家口","承德","沧州","廊坊","衡水"),
                     "山西"=>array("太原","大同","阳泉","长治","晋城","朔州","晋中","运城","忻州","临汾","吕梁"),
                "内蒙古"=>array("呼和浩特","包头","乌海","赤峰","通辽","鄂尔多斯","呼伦贝尔","巴彦淖尔","乌兰察布","兴安","锡林郭勒","阿拉善"),
                "辽宁"=>array("沈阳","大连","鞍山","抚顺","本溪","丹东","锦州","营口","阜新","辽阳","盘锦","铁岭","朝阳","葫芦岛"),
                "吉林"=>array("长春","吉林","四平","辽源","通化","白山","松原","白城","延边"),
                "黑龙江"=>array("哈尔滨","齐齐哈尔","鸡西","鹤岗","双鸭山","大庆","伊春","佳木斯","七台河","牡丹江","黑河","绥化","大兴安岭"),
                "江苏"=>array("南京","无锡","徐州","常州","苏州","南通","连云港","淮安","盐城","扬州","镇江","泰州","宿迁"),
                "浙江"=>array("杭州","宁波","温州","嘉兴","湖州","绍兴","金华","衢州","舟山","台州","丽水"),
                "安徽"=>array("合肥","芜湖","蚌埠","淮南","马鞍山","淮北","铜陵","安庆","黄山","滁州","阜阳","宿州","巢湖","六安","亳州","池州","宣城"),
                "福建"=>array("福州","厦门","莆田","三明","泉州","漳州","南平","龙岩","宁德"),
                "江西"=>array("南昌","景德镇","萍乡","九江","新余","鹰潭","赣州","吉安","宜春","抚州","上饶"),
                "山东"=>array("济南","青岛","淄博","枣庄","东营","烟台","潍坊","威海","济宁","泰安","日照","莱芜","临沂","德州","聊城","滨州","菏泽"),
                "河南"=>array("郑州","开封","洛阳","平顶山","焦作","鹤壁","新乡","安阳","濮阳","许昌","漯河","三门峡","南阳","商丘","信阳","周口","驻马店"),
                "湖北"=>array("武汉","黄石","襄樊","十堰","荆州","宜昌","荆门","鄂州","孝感","黄冈","咸宁","随州","恩施"),
                "湖南"=>array("长沙","株洲","湘潭","衡阳","邵阳","岳阳","常德","张家界","益阳","郴州","永州","怀化","娄底","湘西"),
                "广东"=>array("广州","深圳","珠海","汕头","韶关","佛山","江门","湛江","茂名","肇庆","惠州","梅州","汕尾","河源","阳江","清远","东莞","中山","潮州","揭阳","云浮"),
                "广西"=>array("南宁","柳州","桂林","梧州","北海","防城港","钦州","贵港","玉林","百色","贺州","河池","来宾","崇左"),
                "海南"=>array("海口","三亚"),
                "四川"=>array("成都","自贡","攀枝花泸州","德阳","绵阳","广元","遂宁","内江","乐山","南充","宜宾","广安","达州","眉山","雅安","巴中","资阳","阿坝","甘孜","凉山"),
                "贵州"=>array("贵阳","六盘水","遵义","安顺","铜仁","毕节","黔西南","黔东南","黔南"),
                "云南"=>array("昆明","曲靖","玉溪","保山","昭通","丽江","普洱","临沧","文山","红河","西双版纳","楚雄","大理","德宏","怒江","迪庆"),
                "西藏"=>array("拉萨","昌都","山南","日喀则","那曲","阿里","林芝"),
                "陕西"=>array("西安","铜川","宝鸡","咸阳","渭南","延安","汉中","榆林","安康","商洛"),
                "甘肃"=>array("兰州","嘉峪关","金昌","白银","天水","武威","张掖","平凉","酒泉","庆阳","定西","陇南","临夏","甘南"),
                "青海"=>array("西宁","海东","海北","黄南","海南","果洛","玉树","海西"),
                "宁夏"=>array("银川","石嘴山","吴忠","固原","中卫"),
                "新疆"=>array("乌鲁木齐","克拉玛依","吐鲁番","哈密","和田","阿克苏","喀什","克孜勒苏柯尔克孜","巴音郭楞蒙古","昌吉","博尔塔拉蒙古","伊犁哈萨克","塔城","阿勒泰"),
                
        
        );
    }
}

?>
