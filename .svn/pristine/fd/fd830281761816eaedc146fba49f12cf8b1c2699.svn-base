<?php

require_once APPLICATION_PATH.'/controllers/We_Base_Api_Rest_Controller.php';
require_once APPLICATION_PATH.'/models/servicemodel/Users.php';
require_once APPLICATION_PATH.'/models/servicemodel/UserRegs.php';
require_once APPLICATION_PATH.'/helpers/AuthenticationMgr.php';
require_once APPLICATION_PATH.'/helpers/HttpHelper.php';
require_once APPLICATION_PATH.'/helpers/Constant.php';
require_once APPLICATION_PATH.'/helpers/CurlHelper/CurlHelper.php';
require_once APPLICATION_PATH.'/helpers/CurlHelper/CurlRequest.php';
class V1_UsersController extends We_Base_Api_Rest_Controller{
    
    public function init(){
        parent::init();
    }
    
    public function getcurrentuserinfoAction(){
        try
        {
        	//$this->dbAdapter->beginTransaction();
        	$userId = $this->validLogin();
        	$users = new Users();
        	$users->id = $userId;
        	$users = $users->get();
        	if($users == null){
        		$this->logger->log("user is not exist id = ".$userId,Zend_Log::ERR);
        		throw new WeException(20103);
        	}
        	$users->setPropertyTypeByKey("token", "readOnly");
        	$users->setPropertyTypeByKey("weiboAccessToken", "readOnly");
        	$users->setPropertyTypeByKey("deviceToken", "readOnly");
        	$users->setPropertyTypeByKey("device", "readOnly");
        	$users->setPropertyTypeByKey("telPhone", "readOnly");
        	$users->setPropertyTypeByKey("loginMode", "readOnly");
        	$stringValue = $users->jsonEncode();
        	echo $stringValue;
        	exit();
        }catch (WeException $e) { //首先捕获weRxtException
        	//$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	//$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    public function pushmsgAction(){
        try
        {
        	//$this->dbAdapter->beginTransaction();
        	$user_id = $this->validLogin();
        	$toUser_id = $this->getRequest()->getParam("touser");
        	$users = new Users();
        	$users->id = $toUser_id;
        	$users = $users->get();
            $deviceToken = $users->deviceToken;
            $isPushOn = $users->isPushMsgOn;
            if($deviceToken != null && $isPushOn == 1){
                CommonHelper::send("您有一条新消息", $deviceToken, 1, false);
            }

        	//$this->dbAdapter->commit();
        	echo "{}";
        	exit();
        
        }catch (WeException $e) { //首先捕获weRxtException
        	//$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	//$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    public function updatepushmsgAction(){
        try
        {
        	$this->dbAdapter->beginTransaction();
        	$user_id = $this->validLogin();
        	$isPushOn = $this->getRequest()->getParam("ispushon");
            $users = new Users();
            $users->id = $user_id;
            $users->isPushMsgOn = $isPushOn;
            $users = $users->update();
            
            $this->dbAdapter->commit();
            echo "{}";
            exit();

        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    public function listbyidsAction(){
        try
        {
        	//$this->dbAdapter->beginTransaction();
        	$ids = $this->getRequest()->getParam("ids");
        	if($ids == null){
        		echo "[]";
        		return;
        	}
        	$arr = explode(",", $ids);
        	$queryStr= "id in (";
        	$queryParam = array();
        	foreach ($arr as $key=>$value){
        		$queryStr = $queryStr.'?,';
        		$queryParam[] = $value;
        	}
        	$queryStr = substr($queryStr, 0,strlen($queryStr) - 1);
        	$queryStr = $queryStr.')';
        	$user = new User();
        	$resultSet = $user->fetchList(null, null, null, $queryStr, $queryParam, null, null, null);
        
        	$returnResultSet = array();
        	$i = 0;
        
        	 
        	foreach($resultSet as $key=>$value)
        	{
        		$returnServiceModel = new Users();
        		$returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
        		$returnServiceModel->setOtherPropertyForResponse('list');
        		 
        		$returnServiceModel->unsetNotExposeProperty();
        		 
        		$returnResultSet[$i] = $returnServiceModel;
        		$i++;
        	}
        	 
        	 
        	$stringValue = json_encode($returnResultSet, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        	echo $stringValue;
        	 
        }catch (WeException $e) { //首先捕获weRxtException
        	//$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	//$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    public function getAction(){
        parent::getAction();

        try
        {
        	//$this->dbAdapter->beginTransaction();
        	$userId = $this->getRequest()->getParam("id");
        	$cmpLongitude = $this->getRequest()->getParam("longitude");
        	$cmpLatitude = $this->getRequest()->getParam("latitude");
        	$users = new Users();
        	$users->id = $userId;
        	$users->cmpLatitude = $cmpLatitude;
        	$users->cmpLongitude = $cmpLongitude;
        	$users = $users->get();
            if($users == null){
                $this->logger->log("user is not exist id = ".$userId,Zend_Log::ERR);
                throw new WeException(20103);
            }
        	
        	$stringValue = $users->jsonEncode();
        	echo $stringValue;
        	exit();
        }catch (WeException $e) { //首先捕获weRxtException
        	//$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	//$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
        
    }
    public function indexAction(){
        try
        {
        	//$this->dbAdapter->beginTransaction();
        	$keyword = $this->getRequest()->getParam("keyword");
        	if($keyword == null){
        	    echo "[]";
        	    exit();
        	}
        	$user = new User();
        	if(Verification::varifyTelPhone($keyword)){
        	    //搜电话号码
        	    $rows = $user->fetchList(null, null, null, "telPhone=?", array($keyword), null, null, null);
        	}else{
        	    //搜昵称
        	    $rows = $user->fetchList(null, null, null, "userName like ?", array('%'.$keyword.'%'), null, null, null);
        	}
        	

        	$returnResultSet = array();
        	$i = 0;
        	foreach($rows as $key=>$value)
        	{
        		$returnServiceModel = new Users();
        		$returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
        		$returnServiceModel->setOtherPropertyForResponse('list');
        		$returnServiceModel->unsetNotExposeProperty();
        		$returnResultSet[$i] = $returnServiceModel;
        		$i++;
        	}
        	$stringValue = json_encode($returnResultSet, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        	echo $stringValue;
        	exit();
        	
        }catch (WeException $e) { //首先捕获weRxtException
        	//$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	//$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    public function postAction(){
        $e = new WeException(20104);
        $this->forward('exception','global', '',array('exception'=>$e));
    }
    public function deleteAction(){
        $e = new WeException(20104);
        $this->forward('exception','global', '',array('exception'=>$e));
    }
    
    public function putAction(){
        $e = new WeException(20104);
        $this->forward('exception','global', '',array('exception'=>$e));
    }
    
   
    public function phonelinkAction(){
        try
        {
        	//$this->dbAdapter->beginTransaction();
        	$userId = $this->validLogin();
        	$jsonStr = HttpHelper::getRequestPayload();
        	$jsonArr = json_decode($jsonStr,true);
        	$telPhones = $jsonArr["telPhones"];
        	if($telPhones == null){
        		echo "[]";
        		exit();
        	}
        	$arr = explode(",", $telPhones);
        	$index = 0;
        	$str = "";
        	foreach ($arr as $key=>$value){
        	    if($index == 0){
        	        $str = $value;
        	    }else{
        	        $str = $str.",".$value;
        	    }
        	    ++$index;
        	}
        	$user = new User();
        	$str = "telPhone in (".$str.") and id != ?";
        	$rows = $user->fetchList(null, null, null, $str, array($userId), null, null, null);

        
        	$returnResultSet = array();
        	$i = 0;
        	foreach($rows as $key=>$value)
        	{
        		$returnServiceModel = new Users();
        		$returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
        		$returnServiceModel->setOtherPropertyForResponse('list');
        		$returnServiceModel->unsetNotExposeProperty();
        		$returnResultSet[$i] = $returnServiceModel;
        		$i++;
        	}
        	$stringValue = json_encode($returnResultSet, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        	echo $stringValue;
        	exit();
        	 
        }catch (WeException $e) { //首先捕获weRxtException
        	//$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	//$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    
    public function weibolinkAction(){
    	try
    	{
    		//$this->dbAdapter->beginTransaction();
    		$weibos = $this->getRequest()->getParam("weiboUids");
    		if($weibos == null){
    			echo "[]";
    			exit();
    		}
    		$arr = explode(",", $weibos);
    		$params = array();
    		$index = 0;
    		$str = "";
    		foreach ($arr as $key=>$value){
    		    $params[] = $value;
    			if($index == 0){
    				$str = '?';
    			}else{
    				$str = $str.','.'?';
    			}
    			++$index;
    		}
    		$user = new User();
    		$rows = $user->fetchList(null, null, null, "weiboUid in(".$str.")", $params, null, null, null);
    
    
    		$returnResultSet = array();
    		$i = 0;
    		foreach($rows as $key=>$value)
    		{
    			$returnServiceModel = new Users();
    			$returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
    			$returnServiceModel->setOtherPropertyForResponse('list');
    			$returnServiceModel->unsetNotExposeProperty();
    			$returnResultSet[$i] = $returnServiceModel;
    			$i++;
    		}
    		$stringValue = json_encode($returnResultSet, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
    		echo $stringValue;
    		exit();
    
    	}catch (WeException $e) { //首先捕获weRxtException
    		//$this->dbAdapter->rollback();
    		$this->forward('exception','global', '',array('exception'=>$e));
    	} catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
    		//$this->dbAdapter->rollback();
    		$e = new WeException();
    		$this->forward('exception','global', '',array('exception'=>$e));
    	}
    }
    

    public function changepasswdAction(){
    	try
    	{
    		$this->dbAdapter->beginTransaction();
    		$payload = HttpHelper::getRequestPayload();
    		$arr = json_decode($payload,true);
    		$oldPasswd = $arr['oldpasswd'];
    		$newPasswd = $arr['newpasswd'];
    		
    		if($oldPasswd == null || $newPasswd == null){
    			$this->logger->log("param invalid",Zend_Log::ERR);
    			throw new WeException(20225);
    		}
    		$user_id = $this->validLogin();
    		
    		$users = new Users();
    		$users->id = $user_id;
    		$users = $users->get();
    		if($users == null){
    		    $this->logger->log("user not exist",Zend_Log::ERR);
    		    throw new WeException(20103);
    		}
    		$isValid = Users::verifyPassword($oldPasswd, $users->password);
    		if(!$isValid){
    		    $this->logger->log("old password is invalid",Zend_Log::ERR);
    		    throw new WeException(20225);
    		}
            $users->password = Users::encryptPassword($newPasswd);
    		$users = $users->update();
            if($users->registerFrom == 'byPhone'){
                //修改环信密码
                $url = constant("APPLICATION_PATH").DIRECTORY_SEPARATOR.'configs'.DIRECTORY_SEPARATOR.'application.ini';
                $serverConfig = new Zend_Config_Ini($url, "server");
                $serverConfig = $serverConfig->toArray();
                $easemobDomain = $serverConfig['easemobdomainName'];
                $curl = new CurlRequest();
                $curl->url($easemobDomain.'easemob/users/changepassword');
                $curl->data(array("username"=>$users->id,"newpassword"=>md5($newPasswd)));
                $res = $curl->post();
                if($res['status'] != 1){
                    $this->logger->log('ease mob call fail = '.$res['data'],Zend_Log::ERR);
                	throw new WeException(20303);

                }
            }
    
    		$this->dbAdapter->commit();
    
    		echo "{}";
    	}catch (WeException $e) { //首先捕获weRxtException
    		$this->dbAdapter->rollback();
    		$this->forward('exception','global', '',array('exception'=>$e));
    	} catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
    		$this->dbAdapter->rollback();
    		$e = new WeException();
    		$this->forward('exception','global', '',array('exception'=>$e));
    	}
    }
    
    
    public function resetpasswdAction(){
        try
        {
        	$this->dbAdapter->beginTransaction();
        	$payload = HttpHelper::getRequestPayload();
        	$arr = json_decode($payload,true);
        	$telPhone = $arr['telPhone'];
        	$resetPasswd = $arr['resetPasswd'];
        	$identifier = $arr['identifier'];
        	if($telPhone == null || $resetPasswd == null || $identifier == null){
        		$this->logger->log("reset passwd param is empty",Zend_Log::ERR);
        		throw new WeException(20223);
        	}
        	$user = new User();
        	$rows = $user->fetchList(null, null, null, "telPhone=? and forgetpasswdIdentifier = ? and forgetpasswdIdentifier != ?", array($telPhone,$identifier,''), null, null, null);
        	if(count($rows)<=0){
        		$this->logger->log("forget identifier not exist in system = ".$identifier,Zend_Log::ERR);
        		throw new WeException(20223);
        	}
        	$now = time();
        	$resetInvalidTime = $rows[0]['resetPasswdInvalidTime'];
        	if($now > $resetInvalidTime){
        	    $this->logger->log("over time to valid",Zend_Log::ERR);
        		throw new WeException(20224);
        	}
        	$users = new Users();
        	$users->id = $rows[0]['id'];
        	$users->password = Users::encryptPassword($resetPasswd);

        	$users->update();

        
        	$this->dbAdapter->commit();
        
        	echo "{}";
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    public function forgetpasswdAction(){
        try
        {
        	$this->dbAdapter->beginTransaction();
        	$payload = HttpHelper::getRequestPayload();
        	$arr = json_decode($payload,true);
        	$telPhone = $arr['telPhone'];
        	if($telPhone == null){
        	    $this->logger->log("telPhone should not be empty",Zend_Log::ERR);
        	    throw new WeException(20222);
        	}
        	$user = new User();
        	$rows = $user->fetchList(null, null, null, "telPhone=?", array($telPhone), null, null, null);
        	if(count($rows)<=0){
        	    $this->logger->log("telPhone not exist in system = ".$telPhone,Zend_Log::ERR);
        	    throw new WeException(20222);
        	}
            $users = new Users();
            $users->id = $rows[0]['id'];
            $users->resetPasswdInvalidTime = time() + 10 * 60;
            $users->forgetpasswdIdentifier = rand(10000, 99999);
            //$users->forgetpasswdIdentifier = 111111;
            $users->update();
            //发送给用户短信
            ShortMessageHelper::PostShortMessage($telPhone, $users->forgetpasswdIdentifier);
            
        	$this->dbAdapter->commit();
        
        	echo "{}";
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    public function logoutAction(){
        try
        {
        	$this->dbAdapter->beginTransaction();
        	$user_id = $this->validLogin();
        	$users = new Users();
        	$users->id = $user_id;
        	$users->token = "";
        	$users->device = "";
        	$users->deviceToken = "";
        	$users->update();
        
        	$this->dbAdapter->commit();
        
        	echo "{}";
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    public function registerAction(){
        $this->logger->log('进入了',Zend_Log::DEBUG);
        try
        {
        	$this->dbAdapter->beginTransaction();
        	
        	$telPhone = $this->getRequest()->getParam('telPhone');
        	$password = $this->getRequest()->getParam('password');
        	$userName = $this->getRequest()->getParam('userName');
        	$gender = $this->getRequest()->getParam('gender');
        	$birthday = $this->getRequest()->getParam("birthday");
        	$city = $this->getRequest()->getParam("city");
        	$deviceToken = $this->getRequest()->getParam('deviceToken');
            $device = $this->getRequest()->getParam("device");
            //逗号隔开的id
            $constellations = $this->getRequest()->getParam("constellations");
            
        	if($telPhone == null || $password == null || $userName == null ||
                $gender == null || $birthday == null || $city == null || $constellations == null){
        		$this->logger->log("register info is not complete",Zend_Log::ERR);
        		throw new WeException(20219);
        	}
        	
        	$constArr = explode(",", $constellations);
        	
        	
        
        	$userReg = new UserReg();
        	$rows = $userReg->fetchList(null, null, null, "telPhone = ? and telPhone != ? and status = 2", array($telPhone,''), null, null, null,true);
        	if(count($rows) > 0){
        		$isVerified = Users::verifyPassword($password, $rows[0]['password']);
        		if(!$isVerified){
        		    $this->logger->log("register fail telPhone = ".$telPhone.' password = '.$password,Zend_Log::ERR);
        		    throw new WeException(20220);
        		}
        		//验证成功
        		$userRegs = new UserRegs();
        		$userRegs->id = $rows[0]['id'];
        		$userRegs->status = 3;
        		$userRegs->update();
        		
        		//创建出用户
        		$users = new Users();
        		$users->telPhone = $telPhone;
        		$users->password = $rows[0]['password'];
        		$users->userName = $userName;

        		$users->birthday = $birthday;
        		$users->gender = $gender;
        		$users->registerFrom = "byPhone";
        		$users->loginMode = "byPhone";
        		$users->deviceToken = $deviceToken;
        		$users->device = $device;
                $users->city = $city;
        		$users->prefConstellations = array();
        		foreach ($constArr as $key=>$value)
        		{
        		    $newConst = new Constellations();
        		    $newConst->id = $value;
        		    $newConst = $newConst->get();
        		    $users->prefConstellations[] = $newConst;
        		}
        		$users = $users->create();
        		
        		//头像信息
        		//判断http request中是否有file
        		if (!isset ( $_FILES ['image'] ['name'] ) || !isset ( $_FILES ['image'] ['tmp_name'] ) ||
        		!isset ( $_FILES ['image'] ['type'] ) || !isset ( $_FILES ['image'] ['size'] ) ||
        		!isset ( $_FILES ['image'] ['error'] )) {
        			$this->logger->log('uploadpic is illegal', Zend_Log::ERR);
        			$e = new WeException(20501);
        			throw $e;
        		}
        		 
        		//判断是否有传输错误
        		if ( $_FILES ['image'] ['error'] != 0) {
        			//$iconImage =  $_FILES ['image'];
        			$this->logger->log('file transfer failed error = '.$_FILES['image']['error'], Zend_Log::ERR);
        			$e = new WeException(20502);
        			throw $e;
        		}
        		 
        		$image =  $_FILES ['image'];
        		//判断大小是否超过规定 10M
        		if ( $image['size'] > MAX_FILE_UPLOAD_SIZE || $image['size'] < 0) {
        			$this->logger->log('file size is too big', Zend_Log::ERR);
        			$e = new WeException(20503);
        			throw $e;
        			 
        		}
        		//不能上传空文件
        		if ( $image['size'] == 0) {
        			$this->logger->log('file size is equal to zero', Zend_Log::ERR);
        			$e = new WeException(20504);
        			throw $e;
        		}
        		
        		//判断图片类型是否符合规则
        		if ($image['type'] != 'image/jpeg' && $image['type'] != 'image/jpg' && $image['type'] != 'image/png') {
        			$this->logger->log('file type is illegal = '.$image['type'], Zend_Log::ERR);
        			$e = new WeException(20505);
        			throw $e;
        		}
        		
        		//获取文件信息
        		$fileDir = $image['tmp_name'];
        		$fileType = $image['type'];
        		$fileSize = $image['size'];
        		$fileName = $image['name'];
        		
        		
        		
        		//调用servicemodel将图片插入数据库
        		$attach = new Attachments();
        		$attach = $attach->uploadFile($fileDir, $fileType, $fileName, $fileSize, "avatars", $users->id);
        		
        		$users->avatar_id = $attach->id;
        		$users = $users->update();
        
        	}else{
        		$this->logger->log("register fail telPhone = ".$telPhone.' password = '.$password,Zend_Log::ERR);
        		throw new WeException(20220);
        	}
        
        	
        	//注册环信用户
        	$url = constant("APPLICATION_PATH").DIRECTORY_SEPARATOR.'configs'.DIRECTORY_SEPARATOR.'application.ini';
        	$serverConfig = new Zend_Config_Ini($url, "server");
        	$serverConfig = $serverConfig->toArray();
        	$easemobDomain = $serverConfig['easemobdomainName'];
        	$curl = new CurlRequest();
        	$curl->url($easemobDomain.'easemob/users/register');
        	$curl->data(array("username"=>$users->id,"password"=>md5($password)));
        	$res = $curl->post();
        	if($res['status'] != 1){
        	    $this->logger->log('ease mob call fail = '.$res['data'],Zend_Log::ERR);
        	    throw new WeException(20303);

        	}
        	
        	$this->dbAdapter->commit();
        	$users->setPropertyTypeByKey("token", "readOnly");
        	$users->setPropertyTypeByKey("weiboAccessToken", "readOnly");
        	$users->setPropertyTypeByKey("deviceToken", "readOnly");
        	$users->setPropertyTypeByKey("device", "readOnly");
        	$users->setPropertyTypeByKey("telPhone", "readOnly");
        	$users->setPropertyTypeByKey("loginMode", "readOnly");
            $returnStr = $users->jsonEncode();
        	echo $returnStr;
        	
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    public function valididentifierAction(){
        try
        {
        	$this->dbAdapter->beginTransaction();
        	$payload = HttpHelper::getRequestPayload();
        	$jsonArr = json_decode($payload,true);
        	$telPhone = $jsonArr['telPhone'];
        	$identifier = $jsonArr['identifier'];
        	$password = $jsonArr['password'];
        	
        	//是否绑定手机号
        	$isBind = $jsonArr['isBind'];
        
        	if($telPhone == null){
        		$this->logger->log("telPhone is empty",Zend_Log::ERR);
        		throw new WeException(20212);
        	}
        	
        	if($identifier == null){
        		$this->logger->log("identifier is empty",Zend_Log::ERR);
        		throw new WeException(20213);
        	}
        	if($password == null){
        		$this->logger->log("password is empty",Zend_Log::ERR);
        		throw new WeException(20214);
        	}
        
        	$userReg = new UserReg();
        	$rows = $userReg->fetchList(null, null, null, "telPhone = ? and telPhone != ? and registerIdentifier = ? and registerIdentifier != ? and status = 1", array($telPhone,'',$identifier,''), null, null, null,true);
        	if(count($rows) > 0){
        	    $now = time();
        	    if($now > $rows[0]['registerInValidTime']){
        	        $this->logger->log('identifier is out of time',Zend_Log::ERR);
        	        throw new WeException(20216);
        	    }
        	    
                //验证成功
                if($isBind == 1)
                {
                    //绑定手机号验证成功
                    $userRegs = new UserRegs();
                    $userRegs->id = $rows[0]['id'];
                    $userRegs->status = 3;
                    $userRegs->password = Users::encryptPassword($password);
                    $userRegs->update();
                    
                    $userId = $this->validLogin();
                    $users = new Users();
                    
                    $users->id = $userId;
                    $users = $users->get();
                    if($users->registerFrom == 'byPhone' || $users->telPhone != null)
                    {
                        $this->logger->log("user already bind telPhone",Zend_Log::ERR);
                        throw new WeException(20234);
                    }
                    $users->telPhone = $telPhone;
                    $users->password = Users::encryptPassword($password);
                    $users->update();
                }
                else 
                {
                    //注册验证成功
                    $userRegs = new UserRegs();
                    $userRegs->id = $rows[0]['id'];
                    $userRegs->status = 2;
                    $userRegs->password = Users::encryptPassword($password);
                    $userRegs->update();
                }

                
        	}else{
        	    $this->logger->log("valid fail telPhone = ".$telPhone.' identifier = '.$identifier,Zend_Log::ERR);
        	    throw new WeException(20215);
        	}
        	 
        	$this->dbAdapter->commit();
        
        	echo "{}";
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    
    
    
    public function getidentifierAction(){
        try
        {
        	$this->dbAdapter->beginTransaction();
        	$payload = HttpHelper::getRequestPayload();
        	$jsonArr = json_decode($payload,true);
        	$telPhone = $jsonArr['telPhone'];
        
        	if($telPhone == null){
        		$this->logger->log("telPhone is empty",Zend_Log::ERR);
        		throw new WeException(20212);
        	}
        
        	$userReg = new UserReg();
        	$rows = $userReg->fetchList(null, null, null, "telPhone = ? and telPhone != ?", array($telPhone,''), null, null, null,true);
        	if(count($rows) > 0){
                //走update
                if($rows[0]['status'] == 3){
                    $this->logger->log("telPhone is repeated and status = 3 telPhone = ".$this->telPhone,Zend_Log::ERR);
                    throw new WeException(20210);
                }else{
                    $userRegs = new UserRegs();
                    $userRegs->id = $rows[0]['id'];
                    $userRegs->status = 1;
                    $userRegs->password = '';
                    $userRegs->registerIdentifier = rand(10000, 99999);
                    //$userRegs->registerIdentifier = 111111;
                    $userRegs->registerInValidTime = time() + 30 * 60;
                    $userRegs->update();
                    //发送给用户短信
                    ShortMessageHelper::PostShortMessage($telPhone, $userRegs->registerIdentifier);
                    
                }
        	}else{
        	    $userRegs = new UserRegs();
        	    $userRegs->telPhone = $telPhone;
        	    $userRegs->create();
        	}
        	
        	$this->dbAdapter->commit();
            
        	echo "{}";
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    public function nearbyAction(){
        try
        {
        	//$this->dbAdapter->beginTransaction();
        	$latitude = $this->getRequest()->getParam("latitude");
        	$longitude = $this->getRequest()->getParam("longitude");
        	$page = $this->getRequest()->getParam("page");
        	$filterGender = $this->getRequest()->getParam("filterGender");
        	$filterConstellation = $this->getRequest()->getParam("filterConstellation");

        	$excludeUserId = $this->validLogin();
        	
        	if($latitude == null || $longitude == null){
        	    $this->logger->log('latitude or longitude is invalid',Zend_Log::ERR);
        	    throw new WeException(20201);
        	}
        	if($filterGender == null){
        	    $filterGender ='';
        	}
        	if($filterConstellation == null){
        	    $filterConstellation = 0;
        	}
        	
        	if($page == null){
        	    $page = 1;
        	}
        	
        	    
        	    //已登录，更新用户对应位置和信息
        	$userForUpdate = new Users();
        	$userForUpdate->id = $excludeUserId;
            $userForUpdate->latitude = $latitude;
            $userForUpdate->longitude = $longitude;
            $userForUpdate->locationTime = time();
        	$userForUpdate->prefChatGender = $filterGender;
        	$userForUpdate->prefChatToConstellation = $filterConstellation;
            $userForUpdate->update();
        	
        	$top = NEABYTOP;
        	$skip = ($page - 1) * $top;
        	$query = Users::generateDistanceFilterQuery(MAX_SCOPE_DISTANCE, $latitude, $longitude, $excludeUserId,$filterGender,$filterConstellation,$top,$skip);
            $this->logger->log("query = ".$query,Zend_Log::DEBUG);
        	$user = new User();
            $resultSet = $user->executeQuery($query, array());
        
            $returnResultSet = array();
            $i = 0;
        	

            foreach($resultSet as $key=>$value)
            {
        	   $returnServiceModel = new Users();
        	   $returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
        	   $returnServiceModel->cmpLatitude = $latitude;
        	   $returnServiceModel->cmpLongitude = $longitude;
        	   $returnServiceModel->setOtherPropertyForResponse('list');
        			
        	   $returnServiceModel->unsetNotExposeProperty();
        
        	   $returnResultSet[$i] = $returnServiceModel;
        	   $i++;
             }
        
        
            $stringValue = json_encode($returnResultSet, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            echo $stringValue;
            exit();
      }catch (WeException $e) { //首先捕获weRxtException
        	   //$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
      } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	   //$this->dbAdapter->rollback();
            $e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
      }

    }
    
    public function setcurrentuserAction(){
    	try
    	{
    		$this->dbAdapter->beginTransaction();
    		$payload = HttpHelper::getRequestPayload();
    		$jsonArr = json_decode($payload,true);
    		 
    		$userName = $jsonArr['userName'];
    		$upconstellation = $jsonArr['upconstellation'];
    		$downconstellation = $jsonArr['downconstellation'];
    		$prefConstellation = $jsonArr['prefConstellation'];
    		$signature = $jsonArr['signature'];
    		$city = $jsonArr['city'];
    		$word = $jsonArr['word'];
    		
    		if( $userName == null ||
    		$prefConstellation == null || $city == null){
    			$this->logger->log("set current user info",Zend_Log::ERR);
    			throw new WeException(20235);
    		}
    
    		$constArr = explode(",", $prefConstellation);
    		 
    		$user_id = $this->validLogin();
    		$users = new Users();
    		$users->id = $user_id;
    		$users->userName = $userName;
    		$users->upconstellation = $upconstellation;
    		$users->downconstellation = $downconstellation;
    		$users->signature = $signature;
    		$users->city = $city;
    		$users->word = $word;
    		
    		$users->prefConstellations = array();
    		foreach ($constArr as $key=>$value)
    		{
    			$newConst = new Constellations();
    			$newConst->id = $value;
    			$newConst = $newConst->get();
    			$users->prefConstellations[] = $newConst;
    		}
    		
    		$users->fromType = "setcurrentuserinfo";
    		        
    		        
    		$users = $users->update();
    
    		$this->dbAdapter->commit();
    		$users->setPropertyTypeByKey("token", "readOnly");
    		$users->setPropertyTypeByKey("deviceToken", "readOnly");
    		$users->setPropertyTypeByKey("weiboAccessToken", "readOnly");
    		$users->setPropertyTypeByKey("device", "readOnly");
    		$users->setPropertyTypeByKey("telPhone", "readOnly");
    		$users->setPropertyTypeByKey("loginMode", "readOnly");
    		$returnStr = $users->jsonEncode();
    		echo $returnStr;
    
    	}catch (WeException $e) { //首先捕获weRxtException
    		$this->dbAdapter->rollback();
    		$this->forward('exception','global', '',array('exception'=>$e));
    	} catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
    		$this->dbAdapter->rollback();
    		$e = new WeException();
    		$this->forward('exception','global', '',array('exception'=>$e));
    	}
    }
    
    
    public function followAction(){
    	//加关注
        try
        {
        	$this->dbAdapter->beginTransaction();
        	$currentId = $this->validLogin();
        	//关注某人
        	$selectFollowId = $this->getRequest()->getParam('userId');
            $userFriend = new Userfriend();
            $count = $userFriend->count(null, null, "user_id=? and refUser_id=?", array($currentId,$selectFollowId));
            if($count > 0){
                $this->logger->log('already follow',Zend_Log::ERR);
                throw new WeException(20236);
            }
            $userFriends = new Userfriends();
            $userFriends->user_id = $currentId;
            $userFriends->refUser_id = $selectFollowId;
            
            $rows = $userFriend->fetchList(null, null, null, "user_id=? and refUser_id=?", array($selectFollowId,$currentId),null,null,null);
            if(count($rows) > 0){
                $userFriends->type = 3;
                $userFriendsUpdate = new Userfriends();
                $userFriendsUpdate->id = $rows[0]['id'];
                $userFriendsUpdate->type = 3;
                $userFriendsUpdate->update();
                
            }else{
                $userFriends->type = 1;

            }
            $userFriends->create();

        
        	
        	$this->dbAdapter->commit();
        
        	echo "{}";
        	exit();
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
        
    }
    public function listfansAction(){
        //查看粉丝
        try
        {
        	//$this->dbAdapter->beginTransaction();
        	$currentId = $this->validLogin();
        	//查看某人的关注
        	$selectFollowId = $this->getRequest()->getParam('userId');
        	$page = $this->getRequest()->getParam("page");
        	$name = $this->getRequest()->getParam("keyword");
        	
        	if($page == null){
        		$page = 1;
        	}
        	$top = 20;
        	$skip = ($page - 1) * $top;
        
        	$users = new Users();
        	$selectArr = $users->getSelectedArrayByAlias("u");
        
        	if($name == null){
        	    $rows = $users->tableModel->fetchList($selectArr,"u","inner join user_friend f on u.id = f.user_id ","f.refUser_id = ?",array($selectFollowId), "f.id ASC", $top, $skip);
        	}else{
        	    $rows = $users->tableModel->fetchList($selectArr,"u","inner join user_friend f on u.id = f.user_id ","f.refUser_id = ? and u.userName like ?",array($selectFollowId,'%'.$name.'%'), "f.id ASC", $top, $skip);
        	}

        	$returnResultSet = array();
        	$i = 0;
        	foreach($rows as $key=>$value)
        	{
        		$returnServiceModel = new Users();
        		$returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
        		$returnServiceModel->setOtherPropertyForResponse('list');
        		$returnServiceModel->unsetNotExposeProperty();
        		$returnResultSet[$i] = $returnServiceModel;
        		$i++;
        	}
        	$stringValue = json_encode($returnResultSet, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        	echo $stringValue;
        	exit();
        	//$this->dbAdapter->commit();
        
        	//echo "{}";
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    public function listfollowsAction(){
    	//查看关注
        try
        {
        	//$this->dbAdapter->beginTransaction();
        	$currentId = $this->validLogin();
        	//查看某人的关注
            $selectFollowId = $this->getRequest()->getParam('userId');
            $page = $this->getRequest()->getParam("page");
            $name = $this->getRequest()->getParam("keyword");
            if($page == null){
                $page = 1;
            }
            $top = 20;
            $skip = ($page - 1) * $top;
            
            $users = new Users();
		    $selectArr = $users->getSelectedArrayByAlias("u");
		    
		    if($name == null){
		        $rows = $users->tableModel->fetchList($selectArr,"u","inner join user_friend f on u.id = f.refUser_id ","f.user_id = ?",array($selectFollowId), "f.id ASC", $top, $skip);
		    }else{
		        $rows = $users->tableModel->fetchList($selectArr,"u","inner join user_friend f on u.id = f.refUser_id ","f.user_id = ? and u.userName like ?",array($selectFollowId,'%'.$name.'%'), "f.id ASC", $top, $skip);
		    }
		    

		    $returnResultSet = array();
		    $i = 0;
		    foreach($rows as $key=>$value)
		    {
		    	$returnServiceModel = new Users();
		    	$returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
		    	$returnServiceModel->setOtherPropertyForResponse('list');
		    	$returnServiceModel->unsetNotExposeProperty();
		    	$returnResultSet[$i] = $returnServiceModel;
		    	$i++;
		    }
            $stringValue = json_encode($returnResultSet, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            echo $stringValue;
            exit();
        	//$this->dbAdapter->commit();
        
        	//echo "{}";
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    public function unfollowAction(){
    	//取消关注
        try
        {
//             $weiboUid = 3557780462;
//             $str = md5($weiboUid);
        	$this->dbAdapter->beginTransaction();
        	$currentId = $this->validLogin();
        	//关注某人
        	$selectFollowId = $this->getRequest()->getParam('userId');
        	$userFriend = new Userfriend();
        	$rows = $userFriend->fetchList(null, null, null, "user_id=? and refUser_id=?", array($currentId,$selectFollowId), null, null, null);
  
        	if(count($rows) <= 0){
        		$this->logger->log('not follow yet',Zend_Log::ERR);
        		throw new WeException(20237);
        	}
        	if($rows[0]['type'] == 3){
        	    $rows2 = $userFriend->fetchList(null, null, null, "user_id=? and refUser_id=?", array($selectFollowId,$currentId), null, null, null);
        	    $userFriendsUpdate = new Userfriends();
        	    $userFriendsUpdate->id = $rows2[0]['id'];
        	    $userFriendsUpdate->type = 1;
        	    $userFriendsUpdate->update();
        	}
        	$userFriends = new Userfriends();
        	$userFriends->id = $rows[0]['id'];
        	$userFriends->delete();
        	
        
        
        	 
        	$this->dbAdapter->commit();
        
        	echo "{}";
        	exit();
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    
    public function updateavatarAction(){
    	try
    	{
    		$this->dbAdapter->beginTransaction();
    		$user_id = $this->validLogin();
    		//头像信息
    		//判断http request中是否有file
    		if (!isset ( $_FILES ['image'] ['name'] ) || !isset ( $_FILES ['image'] ['tmp_name'] ) ||
    		!isset ( $_FILES ['image'] ['type'] ) || !isset ( $_FILES ['image'] ['size'] ) ||
    		!isset ( $_FILES ['image'] ['error'] )) {
    			$this->logger->log('uploadpic is illegal', Zend_Log::ERR);
    			$e = new WeException(20501);
    			throw $e;
    		}
    		 
    		//判断是否有传输错误
    		if ( $_FILES ['image'] ['error'] != 0) {
    			//$iconImage =  $_FILES ['image'];
    			$this->logger->log('file transfer failed error = '.$_FILES['image']['error'], Zend_Log::ERR);
    			$e = new WeException(20502);
    			throw $e;
    		}
    		 
    		$image =  $_FILES ['image'];
    		//判断大小是否超过规定 10M
    		if ( $image['size'] > MAX_FILE_UPLOAD_SIZE || $image['size'] < 0) {
    			$this->logger->log('file size is too big', Zend_Log::ERR);
    			$e = new WeException(20503);
    			throw $e;
    
    		}
    		//不能上传空文件
    		if ( $image['size'] == 0) {
    			$this->logger->log('file size is equal to zero', Zend_Log::ERR);
    			$e = new WeException(20504);
    			throw $e;
    		}
    
    		//判断图片类型是否符合规则
    		if ($image['type'] != 'image/jpeg' && $image['type'] != 'image/jpg' && $image['type'] != 'image/png') {
    			$this->logger->log('file type is illegal = '.$image['type'], Zend_Log::ERR);
    			$e = new WeException(20505);
    			throw $e;
    		}
    
    		//获取文件信息
    		$fileDir = $image['tmp_name'];
    		$fileType = $image['type'];
    		$fileSize = $image['size'];
    		$fileName = $image['name'];
    
    		$users = new Users();
    		$users->id = $user_id;
    
    		//调用servicemodel将图片插入数据库
    		$attach = new Attachments();
    		$attach = $attach->uploadFile($fileDir, $fileType, $fileName, $fileSize, "avatars", $user_id);
    
    		$users->avatar_id = $attach->id;
    		$users = $users->update();
    
    		$this->dbAdapter->commit();
    		 
    		$jsonStr = $attach->jsonEncode();
    		echo $jsonStr;
    
    
    	}catch (WeException $e) { //首先捕获weRxtException
    		$this->dbAdapter->rollback();
    		$this->forward('exception','global', '',array('exception'=>$e));
    	} catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
    		$this->dbAdapter->rollback();
    		$e = new WeException();
    		$this->forward('exception','global', '',array('exception'=>$e));
    	}
    
    }
    
    
    //微博注册
    public function registerbyweiboAction()
    {
        try
        {
        	$this->dbAdapter->beginTransaction();
        	 
        	$weiboUid = $this->getRequest()->getParam('weiboUid');
        	$weiboAccessToken = $this->getRequest()->getParam('weiboAccessToken');
        	$userName = $this->getRequest()->getParam('userName');
        	$gender = $this->getRequest()->getParam('gender');
        	$birthday = $this->getRequest()->getParam("birthday");
        	$city = $this->getRequest()->getParam("city");
        	$deviceToken = $this->getRequest()->getParam('deviceToken');
        	$device = $this->getRequest()->getParam("device");
        	//逗号隔开的id
        	$constellations = $this->getRequest()->getParam("constellations");
        
        	if($weiboUid == null || $weiboAccessToken == null || $userName == null ||
        	$gender == null || $birthday == null || $city == null || $constellations == null){
        		$this->logger->log("register info is not complete",Zend_Log::ERR);
        		throw new WeException(20219);
        	}
        	 
        	$constArr = explode(",", $constellations);
        	 
        	 
        
        	$user = new User();
        	$rows = $user->fetchList(null, null, null, "weiboUid = ? and weiboUid != ?", array($weiboUid,''), null, null, null,true);
        	if(count($rows) == 0){
        		//验证成功,注册
        
        		//创建出用户
        		$users = new Users();
        		$users->weiboUid = $weiboUid;
        		$users->weiboAccessToken = $weiboAccessToken;
        		$users->userName = $userName;
        		$users->birthday = $birthday;
        		$users->gender = $gender;
        		$users->registerFrom = "byWeibo";
        		$users->loginMode = "byWeibo";
        		$users->deviceToken = $deviceToken;
        		$users->device = $device;
        		$users->city = $city;
        		$users->prefConstellations = array();
        		foreach ($constArr as $key=>$value)
        		{
        			$newConst = new Constellations();
        			$newConst->id = $value;
        			$newConst = $newConst->get();
        			$users->prefConstellations[] = $newConst;
        		}
        		$users = $users->create();
        
        		//头像信息
        		//判断http request中是否有file
        		if (!isset ( $_FILES ['image'] ['name'] ) || !isset ( $_FILES ['image'] ['tmp_name'] ) ||
        		!isset ( $_FILES ['image'] ['type'] ) || !isset ( $_FILES ['image'] ['size'] ) ||
        		!isset ( $_FILES ['image'] ['error'] )) {
        			$this->logger->log('uploadpic is illegal', Zend_Log::ERR);
        			$e = new WeException(20501);
        			throw $e;
        		}
        		 
        		//判断是否有传输错误
        		if ( $_FILES ['image'] ['error'] != 0) {
        			//$iconImage =  $_FILES ['image'];
        			$this->logger->log('file transfer failed error = '.$_FILES['image']['error'], Zend_Log::ERR);
        			$e = new WeException(20502);
        			throw $e;
        		}
        		 
        		$image =  $_FILES ['image'];
        		//判断大小是否超过规定 10M
        		if ( $image['size'] > MAX_FILE_UPLOAD_SIZE || $image['size'] < 0) {
        			$this->logger->log('file size is too big', Zend_Log::ERR);
        			$e = new WeException(20503);
        			throw $e;
        
        		}
        		//不能上传空文件
        		if ( $image['size'] == 0) {
        			$this->logger->log('file size is equal to zero', Zend_Log::ERR);
        			$e = new WeException(20504);
        			throw $e;
        		}
        
        		//判断图片类型是否符合规则
        		if ($image['type'] != 'image/jpeg' && $image['type'] != 'image/jpg' && $image['type'] != 'image/png') {
        			$this->logger->log('file type is illegal = '.$image['type'], Zend_Log::ERR);
        			$e = new WeException(20505);
        			throw $e;
        		}
        
        		//获取文件信息
        		$fileDir = $image['tmp_name'];
        		$fileType = $image['type'];
        		$fileSize = $image['size'];
        		$fileName = $image['name'];
        
        
        
        		//调用servicemodel将图片插入数据库
        		$attach = new Attachments();
        		$attach = $attach->uploadFile($fileDir, $fileType, $fileName, $fileSize, "avatars", $users->id);
        
        		$users->avatar_id = $attach->id;
        		$users = $users->update();
        
        	}else{
        		$this->logger->log("register fail weiboUid = ".$weiboUid,Zend_Log::ERR);
        		throw new WeException(20233);
        	}
        
        	
        	//注册环信用户
        	$url = constant("APPLICATION_PATH").DIRECTORY_SEPARATOR.'configs'.DIRECTORY_SEPARATOR.'application.ini';
        	$serverConfig = new Zend_Config_Ini($url, "server");
        	$serverConfig = $serverConfig->toArray();
        	$easemobDomain = $serverConfig['easemobdomainName'];
        	$curl = new CurlRequest();
        	$curl->url($easemobDomain.'easemob/users/register');
        	$curl->data(array("username"=>$users->id,"password"=>md5($weiboUid)));
        	$res = $curl->post();
        	if($res['status'] != 1){
        	    $this->logger->log('ease mob call fail = '.$res['data'],Zend_Log::ERR);
        		throw new WeException(20303);
 
        	}
        	
        	
        	$this->dbAdapter->commit();
        	$users->setPropertyTypeByKey("token", "readOnly");
        	$users->setPropertyTypeByKey("weiboAccessToken", "readOnly");
        	$users->setPropertyTypeByKey("deviceToken", "readOnly");
        	$users->setPropertyTypeByKey("device", "readOnly");
        	$users->setPropertyTypeByKey("telPhone", "readOnly");
        	$users->setPropertyTypeByKey("loginMode", "readOnly");
        	$returnStr = $users->jsonEncode();
        	echo $returnStr;
        	 
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    //是否登录过，若没有则返回{}，若有则自动登录
    public function checkweiboAction()
    {
        try
        {
        	$this->dbAdapter->beginTransaction();
        	$payload = HttpHelper::getRequestPayload();
        	$jsonArr = json_decode($payload,true);
        	$weiboUid = $jsonArr['weiboUid'];
        	$weiboAccessToken = $jsonArr['weiboAccessToken'];
        	$device = $jsonArr['device'];
        	$deviceToken = $jsonArr['deviceToken'];
        	if($weiboUid == null || $weiboAccessToken == null){
        		$this->logger->log("bind weibo information is not complete",Zend_Log::ERR);
        		throw new WeException(20231);
        	}
        	
        	$user = new User();
        	$row = $user->fetchList(null, null, null, "weiboUid=? and weiboUid !=?",
        			array($weiboUid,''), null, null, null);
        	if(count($row) > 0)
        	{
        	    //已经有了，直接登录
        	    $users = new Users();
        	    $users->id = $row[0]['id'];
        	    $users = $users->get();
        	    $users->loginMode = 'byWeibo';
        	    $users->device = $device;
        	    $users->deviceToken = $deviceToken;
        	    $users->weiboAccessToken = $weiboAccessToken;
        	    if($users->token == null)
        	    {
        	        $users->token = CommonHelper::create_uuid();
        	    }
        	    $users = $users->update();
        	    
        	    $users->setPropertyTypeByKey("token", "readOnly");
        	    $users->setPropertyTypeByKey("weiboAccessToken", "readOnly");
        	    $users->setPropertyTypeByKey("deviceToken", "readOnly");
        	    $users->setPropertyTypeByKey("device", "readOnly");
        	    $users->setPropertyTypeByKey("telPhone", "readOnly");
        	    $users->setPropertyTypeByKey("loginMode", "readOnly");
        	    $stringValue = $users->jsonEncode();
        	    $this->dbAdapter->commit();
        	    echo $stringValue;
        	    exit();
        	    
        	}
        	else
        	{
        	    //没有用户，返回空json表示要让用户登录
        	    $this->dbAdapter->commit();
        	    echo "{}";
        	    exit();
        	}
        	
        	
        	
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    public function bindweiboAction(){
        try
        {
        	$this->dbAdapter->beginTransaction();
            $payload = HttpHelper::getRequestPayload();
            $jsonArr = json_decode($payload,true);
            $weiboUid = $jsonArr['weiboUid'];
            $weiboAccessToken = $jsonArr['weiboAccessToken'];
            $userId = $this->validLogin();
            
            if($weiboUid == null || $weiboAccessToken == null){
                $this->logger->log("bind weibo information is not complete",Zend_Log::ERR);
                throw new WeException(20231);
            }
            $users = new Users();
            $users->id = $userId;
            $users = $users->get();
            if($users->weiboUid != null)
            {
                $this->logger->log("already bind weibo",Zend_Log::ERR);
                throw new WeException(20232);
            }
            $users->weiboUid = $weiboUid;
            $users->weiboAccessToken = $weiboAccessToken;
            $users = $users->update();
            
            
            $users->setPropertyTypeByKey("token", "readOnly");
            $users->setPropertyTypeByKey("weiboAccessToken", "readOnly");
            $users->setPropertyTypeByKey("deviceToken", "readOnly");
            $users->setPropertyTypeByKey("device", "readOnly");
            $users->setPropertyTypeByKey("telPhone", "readOnly");
            $users->setPropertyTypeByKey("loginMode", "readOnly");
        	$stringValue = $users->jsonEncode();
        	$this->dbAdapter->commit();
        	echo $stringValue;
        	exit();
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
    }
    
    public function loginAction(){
        try
        {
        	$this->dbAdapter->beginTransaction();
            $payload = HttpHelper::getRequestPayload();
            $jsonArr = json_decode($payload,true);
            $loginMode = $jsonArr['loginMode'];
            $deviceToken = $jsonArr['deviceToken'];
            $device = $jsonArr['device'];
            if($loginMode == null)
            {
                $this->logger->log("login information is not complete",Zend_Log::ERR);
                throw new WeException(20204);
            }
            if($loginMode == 'byPhone')
            {

                $telPhone = $jsonArr['telPhone'];
                $password = $jsonArr['password'];
                

                if($telPhone == null || $password == null || $loginMode == null){
                	$this->logger->log("login information is not complete",Zend_Log::ERR);
                	throw new WeException(20204);
                }
                
                $user = new User();
                $row = $user->fetchList(null, null, null, "telPhone=? and telPhone !=?",
                		array($telPhone,''), null, null, null);
                
                if(count($row) <= 0){
                	$this->logger->log("login information is not correct",Zend_Log::ERR);
                	throw new WeException(20204);
                }
                $inPasswd = $row[0]['password'];
                $isValid = Users::verifyPassword($password, $inPasswd);
                if(!$isValid){
                	$this->logger->log("password is incorrect",Zend_Log::ERR);
                	throw new WeException(20204);
                }
                
                
                $users = new Users();
                $users->id = $row[0]['id'];
                $users->loginMode = $loginMode;
                $users->deviceToken = $deviceToken;
                $users->device = $device;
                if($row[0]['token'] == null){
                	$users->token = CommonHelper::create_uuid();
                }
                $users = $users->update();
                
            }
            else 
            {
                $this->logger->log("loginmode is incorrect",Zend_Log::ERR);
                throw new WeException(20204);
            }
            
            $users->setPropertyTypeByKey("token", "readOnly");
            $users->setPropertyTypeByKey("weiboAccessToken", "readOnly");
            $users->setPropertyTypeByKey("deviceToken", "readOnly");
            $users->setPropertyTypeByKey("device", "readOnly");
            $users->setPropertyTypeByKey("telPhone", "readOnly");
            $users->setPropertyTypeByKey("loginMode", "readOnly");
        	$stringValue = $users->jsonEncode();
        	$this->dbAdapter->commit();
        	echo $stringValue;
        	exit();
        }catch (WeException $e) { //首先捕获weRxtException
        	$this->dbAdapter->rollback();
        	$this->forward('exception','global', '',array('exception'=>$e));
        } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
        	$this->dbAdapter->rollback();
        	$e = new WeException();
        	$this->forward('exception','global', '',array('exception'=>$e));
        }
        
    }
    
    
  
}




?>