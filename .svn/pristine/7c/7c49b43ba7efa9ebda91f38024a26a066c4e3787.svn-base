<?php
require_once APPLICATION_PATH.'/controllers/We_Base_Api_Rest_Controller.php';
require_once APPLICATION_PATH.'/models/servicemodel/Users.php';
require_once APPLICATION_PATH.'/models/servicemodel/Problems.php';
require_once APPLICATION_PATH.'/models/servicemodel/UserRegs.php';
require_once APPLICATION_PATH.'/helpers/AuthenticationMgr.php';
require_once APPLICATION_PATH.'/helpers/HttpHelper.php';
require_once APPLICATION_PATH.'/helpers/Constant.php';
require_once APPLICATION_PATH.'/helpers/CurlHelper/CurlHelper.php';
require_once APPLICATION_PATH.'/helpers/CurlHelper/CurlRequest.php';
require_once APPLICATION_PATH.'/models/servicemodel/Lawyers.php';
require_once APPLICATION_PATH.'/models/servicemodel/Lawyerinboxs.php';
class V1_ProblemsController extends We_Base_Api_Rest_Controller{

	public function init(){
		parent::init();
	}
	
	public function postAction()
	{

	    parent::postAction();
	    try
	    {
	    	$this->dbAdapter->beginTransaction();
	    	$content = $this->getRequest()->getParam("content");
	    	$creator = $this->validLogin();
	    	$special = $this->getRequest()->getParam("special");
	    	$city1 = $this->getRequest()->getParam("city1");
	    	$city2 = $this->getRequest()->getParam("city2");
	    	$imageSize = $this->getRequest()->getParam("imageSize");
	    	if($content == null || $creator == null || $special == null ||
            $city1 == null || $city2 == null){
	    	    $this->logger->log("information is not complete when create problems",Zend_Log::ERR);
	    	    throw new WeException(20254);
	    	}
	    	if($imageSize == null){
	    	    $imageSize = 0;
	    	}
	    
	    	$problems = new Problems();
	    	$problems->content = $content;
	    	$problems->creator = $creator;
	    	$problems->special = $special;
	    	$problems->city1 = $city1;
	    	$problems->city2 = $city2;
	    
	    	$problems = $problems->create();

	    
	    	//查看图片信息
	    	if($imageSize > 0){
	    	    for($index = 0; $index < $imageSize; $index++){
	    	        $imageKey = "image".$index;
	    	        //头像信息
	    	        //判断http request中是否有file
	    	        if (!isset ( $_FILES [$imageKey] ['name'] ) || !isset ( $_FILES [$imageKey] ['tmp_name'] ) ||
	    	        !isset ( $_FILES [$imageKey] ['type'] ) || !isset ( $_FILES [$imageKey] ['size'] ) ||
	    	        !isset ( $_FILES [$imageKey] ['error'] ) ) {
	    	             throw new WeException(20255);
	    	        }else{
	    	        	//判断是否有传输错误
	    	        	if ( $_FILES [$imageKey] ['error'] != 0) {
	    	        		//$iconImage =  $_FILES ['image'];
	    	        		$this->logger->log('file transfer failed error = '.$_FILES['image']['error'], Zend_Log::ERR);
	    	        		$e = new WeException(20502);
	    	        		throw $e;
	    	        	}
	    	        		
	    	        	$image =  $_FILES [$imageKey];
	    	        	//判断大小是否超过规定 10M
	    	        	if ( $image['size'] > MAX_FILE_UPLOAD_SIZE || $image['size'] < 0) {
	    	        		$this->logger->log('file size is too big', Zend_Log::ERR);
	    	        		$e = new WeException(20503);
	    	        		throw $e;
	    	        
	    	        	}
	    	        	//不能上传空文件
	    	        	if ( $image['size'] == 0) {
	    	        		$this->logger->log('file size is equal to zero', Zend_Log::ERR);
	    	        		$e = new WeException(20504);
	    	        		throw $e;
	    	        	}
	    	        
	    	        	//判断图片类型是否符合规则
	    	        	if ($image['type'] != 'image/jpeg' && $image['type'] != 'image/jpg' && $image['type'] != 'image/png') {
	    	        		$this->logger->log('file type is illegal = '.$image['type'], Zend_Log::ERR);
	    	        		$e = new WeException(20505);
	    	        		throw $e;
	    	        	}
	    	        
	    	        	//获取文件信息
	    	        	$fileDir = $image['tmp_name'];
	    	        	$fileType = $image['type'];
	    	        	$fileSize = $image['size'];
	    	        	$fileName = $image['name'];
	    	        
	    	        
	    	        	//调用servicemodel将图片插入数据库
	    	        	$attach = new Attachments();
	    	        	$attach = $attach->uploadFile($fileDir, $fileType, $fileName, $fileSize, "problems", $problems->id);
	    	        
	    	        
	    	        }
	    	    }
	    	}
	    	$problemsReturn = new Problems();
	    	$problemsReturn->id = $problems->id;
	    	$problemsReturn = $problemsReturn->get();
	    	$this->dbAdapter->commit();
	    	
	    	//发送异步request给分发CONTROLLER
	    	$url = constant ( "APPLICATION_PATH" ) . DIRECTORY_SEPARATOR . 'configs' . DIRECTORY_SEPARATOR . 'application.ini';
	    	$serverconfig = new Zend_Config_Ini ( $url, "servercommunication" );
	    	$serverconfig = $serverconfig->toArray ();
	    	$servertoken = $serverconfig['servertoken'];
	    	
	    	$urlConfig = new Zend_Config_Ini ( $url, "server" );
	    	$urlConfig = $urlConfig->toArray ();
	    	$apiUrl = $urlConfig['apidomainName'];
	    	CommonHelper::curl_post_async_form($apiUrl."v1/problems/broadcast", "problem_id=".$problems->id."&servertoken=".$servertoken);
	    	
	    	$stringValue = $problemsReturn->jsonEncode();
	    	echo $stringValue;
	    	
	    	exit();
	    }catch (WeException $e) { //首先捕获weRxtException
	    	$this->dbAdapter->rollback();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
	    	$this->dbAdapter->rollback();
	    	$e = new WeException();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    }
	}
	
	public function broadcastAction(){
	    $serverToken = $this->getRequest()->getParam("servertoken");
	    $problem_id = $this->getRequest()->getParam("problem_id");
	    
	    $url = constant ( "APPLICATION_PATH" ) . DIRECTORY_SEPARATOR . 'configs' . DIRECTORY_SEPARATOR . 'application.ini';
	    $serverconfig = new Zend_Config_Ini ( $url, "servercommunication" );
	    $serverconfig = $serverconfig->toArray ();
	    $servertokenInCfg = $serverconfig['servertoken'];
	    if($servertokenInCfg != $serverToken){
	        $this->logger->log("unexpected error in servertoken = ".$serverToken,Zend_Log::ERR);
	        exit();
	    }
	    
	    try
	    {
	        //不启事务
	    	//$this->dbAdapter->beginTransaction();
	    
	    	$problems = new Problems();
	    	$problems->id = $problem_id;
	    
	    	$problems = $problems->get();
	    	if($problems == null){
	    		$this->logger->log("problem is not exist id = ".$problem_id,Zend_Log::ERR);
	    		throw new WeException(20103);
	    	}
	    
	    	//首先判断有无城市和专业都满足的律师
	    	$lawyers = new Lawyers();
	    	$problemSpecial = $problems->special;
	    	$city1 = $problems->city1;
	    	$city2 = $problems->city2;
	    	$rows = array();
	    	if($problemSpecial == "未知"){
	    	    $rows = $lawyers->tableModel->fetchList(null,null,null,"city1=? and city2=?",array($city1,$city2), null, null, null);
	    	    
	    	}else{
	    	    $rows = $lawyers->tableModel->fetchList(null,null,null,"city1=? and city2=? and (special1=? or special2=?)",array($city1,$city2,$problemSpecial,$problemSpecial), null, null, null);
	    	}
	    	if(count($rows) > 0){
	    	    //命中，推送
	    	    foreach($rows as $key=>$value){
	    	        $lawyerId = $value['id'];
	    	        $deviceToken = $value['deviceToken'];
	    	        $layerInbox = new Lawyerinboxs();
	    	        $layerInbox->lawyer_id = $lawyerId;
	    	        $layerInbox->problem_id = $problem_id;
	    	        $layerInbox->create();
	    	        if($deviceToken != null){
	    	            CommonHelper::sendlawyer("有人提了一个新的问题，快去看看吧！", $deviceToken, 1, false);
	    	        }

	    	        //插通知中心，待实现
	    	    }
	    	    exit();
	    	}
	    	
	    	//没命中，寻找对应专业但城市不对的律师
	    	if($problemSpecial == "未知"){
	    		$rows = $lawyers->tableModel->fetchList(null,null,null,"city1 != ? and city2 != ?",array($city1,$city2), null, null, null);
	    	
	    	}else{
	    		$rows = $lawyers->tableModel->fetchList(null,null,null,"city1 != ? and city2 != ? and (special1=? or special2=?)",array($city1,$city2,$problemSpecial,$problemSpecial), null, null, null);
	    	}
	    	
	    	if(count($rows) > 0){
	    		//命中，推送
	    	    foreach($rows as $key=>$value){
	    	    	$lawyerId = $value['id'];
	    	    	$deviceToken = $value['deviceToken'];
	    	    	$layerInbox = new Lawyerinboxs();
	    	    	$layerInbox->lawyer_id = $lawyerId;
	    	    	$layerInbox->problem_id = $problem_id;
	    	    	$layerInbox->create();
	    	    	if($deviceToken != null){
	    	            CommonHelper::sendlawyer("有人提了一个新的问题，快去看看吧！", $deviceToken, 1, false);
	    	        }
	    	    	//插通知中心，待实现
	    	    }
	    		exit();
	    	}
	    	//没命中，全网推送
	    	$rows = $lawyers->tableModel->fetchList(null,null,null,null,null,null,null,null);
	    	
	    	foreach($rows as $key=>$value){
	    		$lawyerId = $value['id'];
	    		$deviceToken = $value['deviceToken'];
	    		$layerInbox = new Lawyerinboxs();
	    		$layerInbox->lawyer_id = $lawyerId;
	    		$layerInbox->problem_id = $problem_id;
	    		$layerInbox->create();
	    		if($deviceToken != null){
	    			CommonHelper::sendlawyer("有人提了一个新的问题，快去看看吧！", $deviceToken, 1, false);
	    		}
	    		//插通知中心，待实现
	    	}
	    	exit();
	    	

	    }catch (WeException $e) { //首先捕获weRxtException
	    	//$this->dbAdapter->rollback();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
	    	//$this->dbAdapter->rollback();
	    	$e = new WeException();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    }
	    
	    
	}
	
	public function countunreadproblemAction(){
	    try
	    {
	    	//$this->dbAdapter->beginTransaction();
	    	$lastUpdateTime = $this->getRequest()->getParam("lastupdatetime");
	    	if($lastUpdateTime == null){
	    	    $lastUpdateTime = 0;
	    	}
	    	$lawyer_id = $this->validLayerLogin();
	    	 
	    	$lawyerinboxs = new Lawyerinboxs();
	    	$count = $lawyerinboxs->tableModel->count(null,null,"lawyer_id = ? and createdAt >= ?",array($lawyer_id,$lastUpdateTime));
            $returnArr = array("count"=>$count);

	        
        	$stringValue = json_encode($returnArr, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        	echo $stringValue;
        	exit();
        	
	    }catch (WeException $e) { //首先捕获weRxtException
	    	//$this->dbAdapter->rollback();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
	    	//$this->dbAdapter->rollback();
	    	$e = new WeException();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    }
	}
	public function lawyerlistbyhomeAction(){


	    try
	    {
	    	//$this->dbAdapter->beginTransaction();
	    	$page = $this->getRequest()->getParam("page");
	        $lawyer_id = $this->validLayerLogin();
	        
	        if($page == null){
	            $page = 1;
	        }
	        $top = 20;
	        $skip = ($page - 1) * $top;
	        
	        $lawyers = new Lawyers();
            $selectArr = $lawyers->getSelectedArrayByAlias("l");
	        $rows = $lawyers->tableModel->fetchList($selectArr,"l","inner join lawyer_inbox i on l.id = i.lawyer_id ","i.lawyer_id = ?",array($lawyer_id), "i.problem_id DESC", $top, $skip);
	        	
        	$returnResultSet = array();
        	$i = 0;
        	foreach($rows as $key=>$value)
        	{
        		$returnServiceModel = new Lawyers();
        		$returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
        		$returnServiceModel->setOtherPropertyForResponse('list');
        		$returnServiceModel->unsetNotExposeProperty();
        		$returnResultSet[$i] = $returnServiceModel;
        		$i++;
        	}
        	$stringValue = json_encode($returnResultSet, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        	echo $stringValue;
        	exit();
        	
	    }catch (WeException $e) { //首先捕获weRxtException
	    	//$this->dbAdapter->rollback();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
	    	//$this->dbAdapter->rollback();
	    	$e = new WeException();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    }
	    
	}
	
	public function takeseatAction(){
	    try
	    {
	    	$this->dbAdapter->beginTransaction();
	    	$problem_id = $this->getRequest()->getParam("problem_id");
	    	$lawyer_id = $this->validLayerLogin();

            $problems = new Problems();
            $problems->id = $problem_id;
            $problems = $problems->get(true);
            if($problems == null){
                throw new WeException(20103);
            }
	    	if($problems->status == 2){
	    	    $this->logger->log("already enter in the seat",Zend_Log::ERR);
	    	    throw new WeException(20256);
	    	}else if($problems->status == 3){
	    	    $this->logger->log("already finish the answer",Zend_Log::ERR);
	    	    throw new WeException(20257);
	    	}else if($problems->status == 4){
	    		$this->logger->log("already close the answer",Zend_Log::ERR);
	    		throw new WeException(20258);
	    	}
	    	//可以抢答
	    	if($problems->answerSeatNumber == 1){
	    	    $problems->seat1_lawyer_id = $lawyer_id;
	    	    $problems->seat1_time = time();
	    	}else if($problems->answerSeatNumber == 2){
	    	    $problems->seat2_lawyer_id = $lawyer_id;
	    	    $problems->seat2_time = time();
	    	}else if($problems->answerSeatNumber == 3){
	    	    $problems->seat3_lawyer_id = $lawyer_id;
	    	    $problems->seat3_time = time();
	    	}else{
	    	    $this->logger->log("seat not correct = ".$problems->answerSeatNumber,Zend_Log::ERR);
	    	    throw new WeException(20259);
	    	}
	    	$problems = $problems->update();
	    
	    	$this->dbAdapter->commit();
	    	$stringValue = $problems->jsonEncode();
	    	echo $stringValue;
	    	exit();
	    	 
	    }catch (WeException $e) { //首先捕获weRxtException
	    	$this->dbAdapter->rollback();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    } catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
	    	$this->dbAdapter->rollback();
	    	$e = new WeException();
	    	$this->forward('exception','global', '',array('exception'=>$e));
	    }
	}
	
	
	public function getAction(){
		parent::getAction();
	
		
		try
		{
			//$this->dbAdapter->beginTransaction();
			$problemId = $this->getRequest()->getParam("id");
	
			$problems = new Problems();
			$problems->id = $problemId;
	
			$problems = $problems->get();
			if($problems == null){
				$this->logger->log("problem is not exist id = ".$problemId,Zend_Log::ERR);
				throw new WeException(20103);
			}
			 
			$stringValue = $problems->jsonEncode();
			echo $stringValue;
			exit();
		}catch (WeException $e) { //首先捕获weRxtException
			//$this->dbAdapter->rollback();
			$this->forward('exception','global', '',array('exception'=>$e));
		} catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
			//$this->dbAdapter->rollback();
			$e = new WeException();
			$this->forward('exception','global', '',array('exception'=>$e));
		}
	
	}
	public function indexAction(){
		try
		{
			//$this->dbAdapter->beginTransaction();
			$keyword = $this->getRequest()->getParam("keyword");
	
			if($keyword == null){
				echo "[]";
				exit();
			}
			$user = new User();
			if(Verification::varifyTelPhone($keyword)){
				//搜电话号码
				$rows = $user->fetchList(null, null, null, "telPhone=?", array($keyword), null, null, null);
			}else{
				//搜昵称
				$rows = $user->fetchList(null, null, null, "userName like ?", array('%'.$keyword.'%'), null, null, null);
			}
			 
	
			$returnResultSet = array();
			$i = 0;
			foreach($rows as $key=>$value)
			{
				$returnServiceModel = new Users();
				$returnServiceModel = $returnServiceModel->setColumnNodeFromTableArray($value);
				$returnServiceModel->setOtherPropertyForResponse('list');
				$returnServiceModel->unsetNotExposeProperty();
				$returnResultSet[$i] = $returnServiceModel;
				$i++;
			}
			$stringValue = json_encode($returnResultSet, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
			echo $stringValue;
			exit();
			 
		}catch (WeException $e) { //首先捕获weRxtException
			//$this->dbAdapter->rollback();
			$this->forward('exception','global', '',array('exception'=>$e));
		} catch (Exception $e) {    //如果捕获不到，作为weException中的默认错误$code = '0000'
			//$this->dbAdapter->rollback();
			$e = new WeException();
			$this->forward('exception','global', '',array('exception'=>$e));
		}
	}
}